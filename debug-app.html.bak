<!doctype html>
<html lang="pt">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Debug Leirisonda App</title>
    <style>
      body {
        font-family:
          system-ui,
          -apple-system,
          sans-serif;
        margin: 0;
        padding: 20px;
        background: #f3f4f6;
      }
      .status {
        background: white;
        padding: 20px;
        margin: 10px 0;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      .success {
        border-left: 4px solid #10b981;
      }
      .error {
        border-left: 4px solid #ef4444;
      }
      .warning {
        border-left: 4px solid #f59e0b;
      }
      .info {
        border-left: 4px solid #3b82f6;
      }
      pre {
        background: #f9fafb;
        padding: 10px;
        border-radius: 4px;
        overflow-x: auto;
      }
    </style>
  </head>
  <body>
    <h1>Debug Leirisonda App</h1>

    <div id="status-container">
      <div class="status info">
        <h3>üîç Diagn√≥stico em execu√ß√£o...</h3>
        <p>Verificando componentes da aplica√ß√£o...</p>
      </div>
    </div>

    <script>
      console.log("üöÄ Iniciando diagn√≥stico da aplica√ß√£o...");

      function addStatus(type, title, message, details = null) {
        const container = document.getElementById("status-container");
        const div = document.createElement("div");
        div.className = `status ${type}`;

        let content = `<h3>${title}</h3><p>${message}</p>`;
        if (details) {
          content += `<pre>${JSON.stringify(details, null, 2)}</pre>`;
        }

        div.innerHTML = content;
        container.appendChild(div);
      }

      // Test 1: Check if we're in development
      addStatus(
        "info",
        "üîß Ambiente",
        `Modo: ${window.location.hostname === "localhost" ? "Desenvolvimento" : "Produ√ß√£o"}`,
      );
      addStatus("info", "üåê URL", `${window.location.href}`);

      // Test 2: Check localStorage
      try {
        localStorage.setItem("test", "ok");
        localStorage.removeItem("test");
        addStatus("success", "üíæ localStorage", "Funcionando corretamente");
      } catch (e) {
        addStatus("error", "üíæ localStorage", "Erro: " + e.message);
      }

      // Test 3: Check CSS loading
      const hasCSS =
        document.querySelector('style, link[rel="stylesheet"]') !== null;
      addStatus(
        hasCSS ? "success" : "warning",
        "üé® CSS",
        hasCSS ? "CSS carregado" : "Nenhum CSS detectado",
      );

      // Test 4: Check if React would work
      try {
        const root = document.getElementById("root");
        if (root) {
          addStatus("success", "üéØ Root Element", "Elemento #root encontrado");
        } else {
          addStatus(
            "error",
            "üéØ Root Element",
            "Elemento #root N√ÉO encontrado",
          );
        }
      } catch (e) {
        addStatus("error", "üéØ Root Element", "Erro: " + e.message);
      }

      // Test 5: Fetch main app files to see if they're available
      fetch("/src/main.tsx")
        .then((response) => {
          if (response.ok) {
            addStatus("success", "üìù main.tsx", "Arquivo acess√≠vel");
          } else {
            addStatus(
              "error",
              "üìù main.tsx",
              `HTTP ${response.status}: ${response.statusText}`,
            );
          }
        })
        .catch((error) => {
          addStatus(
            "error",
            "üìù main.tsx",
            "Erro ao acessar: " + error.message,
          );
        });

      fetch("/src/App.tsx")
        .then((response) => {
          if (response.ok) {
            addStatus("success", "üì± App.tsx", "Arquivo acess√≠vel");
          } else {
            addStatus(
              "error",
              "üì± App.tsx",
              `HTTP ${response.status}: ${response.statusText}`,
            );
          }
        })
        .catch((error) => {
          addStatus("error", "üì± App.tsx", "Erro ao acessar: " + error.message);
        });

      // Test 6: Check if Vite is running
      fetch("/@vite/client")
        .then((response) => {
          if (response.ok) {
            addStatus(
              "success",
              "‚ö° Vite",
              "Servidor de desenvolvimento ativo",
            );
          } else {
            addStatus(
              "warning",
              "‚ö° Vite",
              "Servidor de desenvolvimento pode n√£o estar ativo",
            );
          }
        })
        .catch((error) => {
          addStatus(
            "warning",
            "‚ö° Vite",
            "N√£o foi poss√≠vel verificar Vite: " + error.message,
          );
        });

      // Test 7: Console errors check
      let consoleErrors = [];
      const originalError = console.error;
      console.error = function (...args) {
        consoleErrors.push(args.join(" "));
        originalError.apply(console, args);
      };

      setTimeout(() => {
        if (consoleErrors.length > 0) {
          addStatus(
            "warning",
            "üö® Erros no Console",
            `${consoleErrors.length} erros detectados`,
            consoleErrors,
          );
        } else {
          addStatus("success", "‚úÖ Console", "Nenhum erro detectado");
        }
      }, 3000);

      // Add manual tests
      setTimeout(() => {
        addStatus(
          "info",
          "üîß Teste Manual",
          `
                <button onclick="window.location.reload()">Recarregar P√°gina</button>
                <button onclick="localStorage.clear(); sessionStorage.clear(); window.location.reload()">Limpar Cache e Recarregar</button>
                <button onclick="window.location.href='/'">Ir para App Principal</button>
            `,
        );
      }, 1000);
    </script>
  </body>
</html>
