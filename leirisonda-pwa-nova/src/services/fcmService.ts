// Servi√ßo FCM para notifica√ß√µes push
export class FCMService {
  private static instance: FCMService;

  constructor() {
    if (FCMService.instance) {
      return FCMService.instance;
    }
    FCMService.instance = this;
  }

  /**
   * Enviar notifica√ß√£o para um utilizador espec√≠fico
   */
  async sendNotificationToUser(
    userId: string | number,
    notification: {
      title: string;
      body: string;
      icon?: string;
      clickAction?: string;
      data?: any;
    },
  ): Promise<boolean> {
    try {
      console.log(
        `üì± FCM: Tentando enviar notifica√ß√£o para utilizador ${userId}`,
      );

      // Para j√°, vamos simular o envio e usar notifica√ß√µes locais
      if ("Notification" in window && Notification.permission === "granted") {
        const localNotification = new Notification(notification.title, {
          body: notification.body,
          icon: notification.icon || "/icon.svg",
          badge: "/icon.svg",
          tag: `work-${userId}`,
          data: notification.data,
          requireInteraction: true,
        });

        // Auto-close ap√≥s 10 segundos
        setTimeout(() => {
          localNotification.close();
        }, 10000);

        // Handle click
        localNotification.onclick = () => {
          window.focus();
          localNotification.close();
          if (notification.clickAction) {
            window.location.hash = notification.clickAction.replace("/#", "");
          }
        };

        console.log(
          `‚úÖ FCM: Notifica√ß√£o local enviada para utilizador ${userId}`,
        );
        return true;
      } else {
        console.warn(`‚ö†Ô∏è FCM: Permiss√µes de notifica√ß√£o n√£o concedidas`);
        return false;
      }
    } catch (error) {
      console.error(
        `‚ùå FCM: Erro ao enviar notifica√ß√£o para utilizador ${userId}:`,
        error,
      );
      return false;
    }
  }

  /**
   * Solicitar permiss√£o para notifica√ß√µes
   */
  async requestPermission(): Promise<boolean> {
    try {
      if (!("Notification" in window)) {
        console.warn("‚ö†Ô∏è FCM: Este browser n√£o suporta notifica√ß√µes");
        return false;
      }

      if (Notification.permission === "granted") {
        console.log("‚úÖ FCM: Permiss√£o j√° concedida");
        return true;
      }

      if (Notification.permission === "denied") {
        console.warn("‚ö†Ô∏è FCM: Permiss√£o negada pelo utilizador");
        return false;
      }

      const permission = await Notification.requestPermission();
      if (permission === "granted") {
        console.log("‚úÖ FCM: Permiss√£o concedida");
        return true;
      } else {
        console.warn("‚ö†Ô∏è FCM: Permiss√£o negada");
        return false;
      }
    } catch (error) {
      console.error("‚ùå FCM: Erro ao solicitar permiss√£o:", error);
      return false;
    }
  }

  /**
   * Verificar se as notifica√ß√µes est√£o dispon√≠veis
   */
  isNotificationSupported(): boolean {
    return "Notification" in window;
  }

  /**
   * Obter estado atual da permiss√£o
   */
  getPermissionState(): NotificationPermission {
    if (!("Notification" in window)) {
      return "denied";
    }
    return Notification.permission;
  }

  /**
   * Inicializar o servi√ßo FCM
   */
  async initialize(): Promise<boolean> {
    try {
      console.log("üöÄ FCM: Inicializando servi√ßo...");

      if (!this.isNotificationSupported()) {
        console.warn("‚ö†Ô∏è FCM: Notifica√ß√µes n√£o suportadas");
        return false;
      }

      const hasPermission = await this.requestPermission();
      if (hasPermission) {
        console.log("‚úÖ FCM: Servi√ßo inicializado com sucesso");
        return true;
      } else {
        console.warn("‚ö†Ô∏è FCM: Servi√ßo inicializado sem permiss√µes");
        return false;
      }
    } catch (error) {
      console.error("‚ùå FCM: Erro na inicializa√ß√£o:", error);
      return false;
    }
  }
}

// Exportar inst√¢ncia singleton
export const fcmService = new FCMService();
