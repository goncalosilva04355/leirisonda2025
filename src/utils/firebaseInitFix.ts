// Corre√ß√£o for√ßada para inicializa√ß√£o Firebase/Firestore
import { initializeApp, getApps, FirebaseApp } from "firebase/app";
import { getFirestore, Firestore } from "firebase/firestore";

// Configura√ß√£o do projeto Firebase (leiria-1cfc9)
const firebaseConfig = {
  apiKey: "AIzaSyBM6gvL9L6K0CEnM3s5ZzPGqHzut7idLQw",
  authDomain: "leiria-1cfc9.firebaseapp.com",
  databaseURL:
    "https://leiria-1cfc9-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "leiria-1cfc9",
  storageBucket: "leiria-1cfc9.firebasestorage.app",
  messagingSenderId: "632599887141",
  appId: "1:632599887141:web:1290b471d41fc3ad64eecc",
  measurementId: "G-Q2QWQVH60L",
};

let globalFirebaseApp: FirebaseApp | null = null;
let globalFirestore: Firestore | null = null;

// Fun√ß√£o para for√ßar inicializa√ß√£o do Firebase
export function forceInitializeFirebase(): FirebaseApp | null {
  try {
    console.log("üîß For√ßando inicializa√ß√£o do Firebase...");

    // Limpar apps existentes se houver problemas
    const existingApps = getApps();
    console.log(`üì± Apps Firebase existentes: ${existingApps.length}`);

    if (existingApps.length > 0) {
      globalFirebaseApp = existingApps[0];
      console.log("‚úÖ Usando app Firebase existente");
    } else {
      globalFirebaseApp = initializeApp(firebaseConfig);
      console.log("‚úÖ Nova app Firebase inicializada");
    }

    console.log("‚úÖ Firebase App configurada:", globalFirebaseApp.name);
    return globalFirebaseApp;
  } catch (error) {
    console.error("‚ùå Erro ao inicializar Firebase:", error);
    return null;
  }
}

// Fun√ß√£o para for√ßar inicializa√ß√£o do Firestore
export function forceInitializeFirestore(): Firestore | null {
  try {
    console.log("üîß For√ßando inicializa√ß√£o do Firestore...");

    if (!globalFirebaseApp) {
      globalFirebaseApp = forceInitializeFirebase();
    }

    if (!globalFirebaseApp) {
      console.error("‚ùå Firebase App n√£o dispon√≠vel para Firestore");
      return null;
    }

    if (!globalFirestore) {
      globalFirestore = getFirestore(globalFirebaseApp);
      console.log("‚úÖ Firestore inicializado com sucesso");
      console.log(
        "üìä Projeto Firestore:",
        globalFirestore.app.options.projectId,
      );
    }

    return globalFirestore;
  } catch (error) {
    console.error("‚ùå Erro ao inicializar Firestore:", error);
    return null;
  }
}

// Fun√ß√£o de teste completo
export async function testFirebaseConnection(): Promise<boolean> {
  try {
    console.log("üß™ Testando conex√£o Firebase completa...");

    // Testar Firebase App
    const app = forceInitializeFirebase();
    if (!app) {
      console.error("‚ùå Firebase App falhou");
      return false;
    }

    // Testar Firestore
    const db = forceInitializeFirestore();
    if (!db) {
      console.error("‚ùå Firestore falhou");
      return false;
    }

    // Testar opera√ß√£o simples
    const { doc, getDoc } = await import("firebase/firestore");
    const testDoc = doc(db, "test", "connection");

    try {
      await getDoc(testDoc);
      console.log("‚úÖ Teste de leitura Firestore: OK");
    } catch (readError) {
      console.warn("‚ö†Ô∏è Teste de leitura Firestore falhou:", readError);
      console.log("üí° Pode ser problema de regras de seguran√ßa");
    }

    console.log("‚úÖ Firebase/Firestore inicializado e testado");
    return true;
  } catch (error) {
    console.error("‚ùå Teste de conex√£o falhou:", error);
    return false;
  }
}

// Getters globais
export function getGlobalFirebaseApp(): FirebaseApp | null {
  return globalFirebaseApp || forceInitializeFirebase();
}

export function getGlobalFirestore(): Firestore | null {
  return globalFirestore || forceInitializeFirestore();
}

// Auto-executar inicializa√ß√£o
setTimeout(() => {
  testFirebaseConnection();
}, 500);

// Executar novamente ap√≥s 2 segundos para garantir
setTimeout(() => {
  if (!globalFirestore) {
    console.log("üîÑ Retry: Tentando inicializar Firestore novamente...");
    testFirebaseConnection();
  }
}, 2000);
