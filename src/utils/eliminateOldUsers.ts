/**
 * Script para eliminar completamente todos os usu√°rios antigos
 * Este script executa a limpeza nuclear automaticamente
 */

import { completeUserCleanupService } from "../services/completeUserCleanup";

export const eliminateOldUsersNow = async () => {
  console.log("üö® INICIANDO ELIMINA√á√ÉO TOTAL DE USU√ÅRIOS ANTIGOS...");

  try {
    // 1. Primeiro verificar se h√° usu√°rios antigos
    const hasOldUsers = await completeUserCleanupService.hasOldUsersLoggedIn();
    console.log("üîç Usu√°rios antigos detectados:", hasOldUsers);

    // 2. Analisar dados antes da limpeza
    const analysis = await completeUserCleanupService.analyzeUserData();
    console.log("ÔøΩÔøΩÔøΩÔøΩ An√°lise completa:", analysis);

    if (analysis.firebaseAuthUser) {
      console.log(
        "‚ö†Ô∏è FIREBASE AUTH ATIVO - USU√ÅRIO ANTIGO LOGADO:",
        analysis.details.firebaseCurrentUser,
      );
    }

    // 3. Executar limpeza nuclear
    console.log("üí• EXECUTANDO LIMPEZA NUCLEAR...");
    const result = await completeUserCleanupService.nuclearUserCleanup();

    console.log("‚úÖ RESULTADO DA LIMPEZA:", result);

    if (result.success) {
      console.log("üéâ USU√ÅRIOS ANTIGOS ELIMINADOS COM SUCESSO!");
      console.log(`üìä Estat√≠sticas:
        - localStorage limpo: ${result.details.localStorageKeysCleared.length} chaves
        - sessionStorage limpo: ${result.details.sessionStorageCleared}
        - Firebase Auth limpo: ${result.details.firebaseAuthCleared}
        - IndexedDB limpo: ${result.details.indexedDBCleared}
        - Super admin recriado: ${result.details.superAdminRecreated}
      `);

      // For√ßar reload ap√≥s 3 segundos
      setTimeout(() => {
        console.log("üîÑ Recarregando aplica√ß√£o para garantir estado limpo...");
        window.location.reload();
      }, 3000);

      return {
        success: true,
        message: "Usu√°rios antigos eliminados com sucesso!",
      };
    } else {
      console.error("‚ùå FALHA NA LIMPEZA:", result.message);
      return { success: false, message: result.message };
    }
  } catch (error) {
    console.error("üí• ERRO CR√çTICO NA ELIMINA√á√ÉO:", error);
    return { success: false, message: `Erro cr√≠tico: ${error}` };
  }
};

// Fun√ß√£o para executar imediatamente quando o m√≥dulo √© importado
export const executeImmediateCleanup = () => {
  // Aguardar um pouco para garantir que a aplica√ß√£o est√° carregada
  setTimeout(async () => {
    await eliminateOldUsersNow();
  }, 1000);
};

// Auto-execu√ß√£o se necess√°rio (descomente a linha abaixo para execu√ß√£o autom√°tica)
// executeImmediateCleanup();
