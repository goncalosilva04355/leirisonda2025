/**
 * Diagn√≥stico e corre√ß√£o completa de conectividade Firebase
 * Resolve problemas de sync, auth e regras
 */

export class FirebaseConnectivityFix {
  /**
   * Diagn√≥stico completo de conectividade
   */
  static async runDiagnostic(): Promise<{
    status: "success" | "warning" | "error";
    issues: string[];
    fixes: string[];
    recommendations: string[];
  }> {
    console.log("üîç INICIANDO DIAGN√ìSTICO COMPLETO DE CONECTIVIDADE");

    const issues: string[] = [];
    const fixes: string[] = [];
    const recommendations: string[] = [];

    try {
      // 1. Verificar conectividade b√°sica
      const networkTest = await this.testNetworkConnectivity();
      if (!networkTest.success) {
        issues.push("‚ùå Problema de rede b√°sica");
        fixes.push("üåê Verificar conex√£o √† internet");
      }

      // 2. Verificar Firebase Services
      const firebaseTest = await this.testFirebaseServices();
      if (!firebaseTest.success) {
        issues.push("‚ùå Firebase Services n√£o dispon√≠veis");
        fixes.push("üî• Reinicializar Firebase");
      }

      // 3. Verificar autentica√ß√£o
      const authTest = await this.testAuthentication();
      if (!authTest.success) {
        issues.push("‚ùå Problema de autentica√ß√£o");
        fixes.push("üîê Corrigir autentica√ß√£o");
      }

      // 4. Verificar regras Firestore
      const rulesTest = await this.testFirestoreRules();
      if (!rulesTest.success) {
        issues.push("‚ùå Regras Firestore bloqueando acesso");
        fixes.push("üìã Atualizar regras Firestore");
      }

      // 5. Determinar status geral
      let status: "success" | "warning" | "error" = "success";
      if (issues.length > 2) {
        status = "error";
      } else if (issues.length > 0) {
        status = "warning";
      }

      // 6. Gerar recomenda√ß√µes
      if (issues.length === 0) {
        recommendations.push("‚úÖ Sistema funcionando corretamente");
      } else {
        recommendations.push("üîß Aplicar corre√ß√µes sugeridas");
        recommendations.push("‚è∞ Aguardar 2-3 minutos ap√≥s aplicar corre√ß√µes");
        recommendations.push("üîÑ Fazer refresh da p√°gina ap√≥s corre√ß√µes");
      }

      return {
        status,
        issues,
        fixes,
        recommendations,
      };
    } catch (error: any) {
      console.error("‚ùå Erro no diagn√≥stico:", error);
      return {
        status: "error",
        issues: [`‚ùå Erro no diagn√≥stico: ${error.message}`],
        fixes: ["üîß Executar corre√ß√£o de emerg√™ncia"],
        recommendations: ["‚ö†Ô∏è Contactar suporte se o problema persistir"],
      };
    }
  }

  /**
   * Teste de conectividade de rede b√°sica
   */
  private static async testNetworkConnectivity(): Promise<{
    success: boolean;
    details: string;
  }> {
    try {
      // Verificar se navigator.onLine est√° true
      if (!navigator.onLine) {
        return { success: false, details: "Dispositivo offline" };
      }

      // Tentar fetch a um servi√ßo externo
      const response = await fetch("https://www.google.com/favicon.ico", {
        method: "HEAD",
        mode: "no-cors",
        cache: "no-cache",
      });

      return { success: true, details: "Conectividade OK" };
    } catch (error: any) {
      return { success: false, details: `Erro de rede: ${error.message}` };
    }
  }

  /**
   * Teste de servi√ßos Firebase
   */
  private static async testFirebaseServices(): Promise<{
    success: boolean;
    details: string;
  }> {
    try {
      const { getDB, getAuthService } = await import("../firebase/config");

      // Testar Firestore
      const db = await getDB();
      if (!db) {
        return { success: false, details: "Firestore n√£o inicializado" };
      }

      // Testar Auth
      const auth = await getAuthService();
      if (!auth) {
        return { success: false, details: "Firebase Auth n√£o inicializado" };
      }

      return { success: true, details: "Firebase Services OK" };
    } catch (error: any) {
      return { success: false, details: `Erro Firebase: ${error.message}` };
    }
  }

  /**
   * Teste de autentica√ß√£o
   */
  private static async testAuthentication(): Promise<{
    success: boolean;
    details: string;
  }> {
    try {
      const { authService } = await import("../services/authService");

      // Verificar se h√° um usu√°rio logado
      const currentUser = await authService.getCurrentUserProfile();

      if (!currentUser) {
        return { success: false, details: "Nenhum usu√°rio autenticado" };
      }

      return {
        success: true,
        details: `Usu√°rio autenticado: ${currentUser.name}`,
      };
    } catch (error: any) {
      return { success: false, details: `Erro autentica√ß√£o: ${error.message}` };
    }
  }

  /**
   * Teste de regras Firestore
   */
  private static async testFirestoreRules(): Promise<{
    success: boolean;
    details: string;
  }> {
    try {
      const { getDB } = await import("../firebase/config");
      const db = await getDB();

      if (!db) {
        return { success: false, details: "Firestore n√£o dispon√≠vel" };
      }

      const { doc, getDoc, setDoc, deleteDoc } = await import(
        "firebase/firestore"
      );

      // Teste de leitura
      try {
        const testDoc = doc(db, "__test__", "connectivity-test");
        await getDoc(testDoc);
      } catch (readError: any) {
        if (readError.code === "permission-denied") {
          return { success: false, details: "Regras bloqueando leitura" };
        }
      }

      // Teste de escrita
      try {
        const testDoc = doc(db, "__test__", "connectivity-test");
        await setDoc(testDoc, {
          test: true,
          timestamp: new Date().toISOString(),
        });

        // Limpar documento de teste
        await deleteDoc(testDoc);
      } catch (writeError: any) {
        if (writeError.code === "permission-denied") {
          return { success: false, details: "Regras bloqueando escrita" };
        }
      }

      return { success: true, details: "Regras Firestore OK" };
    } catch (error: any) {
      return { success: false, details: `Erro regras: ${error.message}` };
    }
  }

  /**
   * Aplicar corre√ß√µes autom√°ticas
   */
  static async applyAutomaticFixes(): Promise<{
    success: boolean;
    message: string;
  }> {
    console.log("üîß APLICANDO CORRE√á√ïES AUTOM√ÅTICAS...");

    try {
      // 1. Reinicializar Firebase
      await this.reinitializeFirebase();

      // 2. Limpar cache problem√°tico
      await this.clearProblematicCache();

      // 3. For√ßar nova conex√£o
      await this.forceNewConnection();

      return {
        success: true,
        message: "‚úÖ Corre√ß√µes aplicadas com sucesso! Fa√ßa refresh da p√°gina.",
      };
    } catch (error: any) {
      console.error("‚ùå Erro ao aplicar corre√ß√µes:", error);
      return {
        success: false,
        message: `‚ùå Erro ao aplicar corre√ß√µes: ${error.message}`,
      };
    }
  }

  /**
   * Reinicializar Firebase
   */
  private static async reinitializeFirebase(): Promise<void> {
    try {
      const { reinitializeFirebase } = await import("../firebase/config");
      await reinitializeFirebase();
      console.log("‚úÖ Firebase reinicializado");
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao reinicializar Firebase:", error);
    }
  }

  /**
   * Limpar cache problem√°tico
   */
  private static async clearProblematicCache(): Promise<void> {
    try {
      // Limpar apenas sessionStorage (manter localStorage para dados)
      sessionStorage.clear();

      // Limpar cache espec√≠fico do Firebase
      if ("caches" in window) {
        const cacheNames = await caches.keys();
        for (const cacheName of cacheNames) {
          if (
            cacheName.includes("firebase") ||
            cacheName.includes("firestore")
          ) {
            await caches.delete(cacheName);
          }
        }
      }

      console.log("‚úÖ Cache problem√°tico limpo");
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao limpar cache:", error);
    }
  }

  /**
   * For√ßar nova conex√£o
   */
  private static async forceNewConnection(): Promise<void> {
    try {
      // For√ßar desconex√£o e reconex√£o
      const { getDB } = await import("../firebase/config");
      const db = await getDB();

      if (db) {
        const { disableNetwork, enableNetwork } = await import(
          "firebase/firestore"
        );

        // Desconectar temporariamente
        await disableNetwork(db);

        // Aguardar um pouco
        await new Promise((resolve) => setTimeout(resolve, 1000));

        // Reconectar
        await enableNetwork(db);

        console.log("‚úÖ Nova conex√£o for√ßada");
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao for√ßar nova conex√£o:", error);
    }
  }

  /**
   * Verifica√ß√£o r√°pida de status
   */
  static async quickStatusCheck(): Promise<{
    isOnline: boolean;
    firebaseReady: boolean;
    userAuthenticated: boolean;
    canReadFirestore: boolean;
    canWriteFirestore: boolean;
  }> {
    const status = {
      isOnline: navigator.onLine,
      firebaseReady: false,
      userAuthenticated: false,
      canReadFirestore: false,
      canWriteFirestore: false,
    };

    try {
      // Verificar Firebase
      const { isFirebaseReady } = await import("../firebase/config");
      status.firebaseReady = isFirebaseReady();

      // Verificar autentica√ß√£o
      const { authService } = await import("../services/authService");
      const currentUser = await authService.getCurrentUserProfile();
      status.userAuthenticated = !!currentUser;

      // Verificar Firestore (se poss√≠vel)
      if (status.firebaseReady && status.userAuthenticated) {
        const rulesTest = await this.testFirestoreRules();
        status.canReadFirestore = rulesTest.success;
        status.canWriteFirestore = rulesTest.success;
      }
    } catch (error) {
      console.warn("Erro na verifica√ß√£o r√°pida:", error);
    }

    return status;
  }
}
