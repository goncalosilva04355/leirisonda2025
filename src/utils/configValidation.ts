// Utilit√°rio para validar configura√ß√£o Firebase ao inicializar

import { getFirebaseConfig } from "../config/firebaseConfigHelper";

export const validateAppConfiguration = (): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
} => {
  const errors: string[] = [];
  const warnings: string[] = [];

  try {
    const config = getFirebaseConfig();

    // Verifica√ß√µes obrigat√≥rias
    if (!config.apiKey) {
      errors.push("API Key do Firebase est√° faltando");
    }

    if (!config.projectId) {
      errors.push("Project ID do Firebase est√° faltando");
    }

    if (!config.authDomain) {
      errors.push("Auth Domain do Firebase est√° faltando");
    }

    if (!config.databaseURL) {
      warnings.push(
        "Database URL est√° faltando - funcionalidade de Realtime Database pode n√£o funcionar",
      );
    }

    // Verificar se est√° em desenvolvimento
    const isDev =
      import.meta.env.DEV || import.meta.env.NODE_ENV !== "production";
    if (isDev && config.apiKey === "AIzaSyBM6gvL9L6K0CEnM3s5ZzPGqHzut7idLQw") {
      console.log("üîß Usando configura√ß√£o de desenvolvimento com fallbacks");
    }

    const isValid = errors.length === 0;

    if (isValid) {
      console.log("‚úÖ Configura√ß√£o Firebase v√°lida");
      console.log("üìç Projeto:", config.projectId);
    } else {
      console.error("‚ùå Configura√ß√£o Firebase inv√°lida:", errors);
    }

    if (warnings.length > 0) {
      console.warn("‚ö†Ô∏è Avisos de configura√ß√£o:", warnings);
    }

    return { isValid, errors, warnings };
  } catch (error) {
    errors.push(`Erro ao validar configura√ß√£o: ${error}`);
    return { isValid: false, errors, warnings };
  }
};

// Auto-executar valida√ß√£o quando o m√≥dulo for importado
export const configValidationResult = validateAppConfiguration();
