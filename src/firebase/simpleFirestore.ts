// Configura√ß√£o Firestore SIMPLES que funciona
import { getFirebaseApp, getFirestoreInstance } from "./config";

// Obter app Firebase centralizada
const app = getFirebaseApp();
console.log("‚úÖ Firebase App obtida:", app.name);

// Vari√°vel para armazenar inst√¢ncia do Firestore
let db: any = null;

// Fun√ß√£o ass√≠ncrona para inicializar Firestore
async function initializeFirestore() {
  if (db) return db; // J√° inicializado

  try {
    // Aguardar um pouco para garantir que o Firebase est√° pronto
    await new Promise((resolve) => setTimeout(resolve, 100));

    db = getFirestoreInstance();
    console.log("‚úÖ Firestore inicializado assincronamente");
    return db;
  } catch (error: any) {
    console.error("‚ùå Erro ao inicializar Firestore:", error);

    // Verificar se √© erro espec√≠fico de Firestore n√£o habilitado
    if (
      error.message?.includes("getImmediate") ||
      error.code === "firestore/unavailable"
    ) {
      console.error("‚ùå Firestore n√£o est√° habilitado no projeto Firebase");
      console.error(
        "üîó V√° para: https://console.firebase.google.com/project/leiria-1cfc9/firestore",
      );
    }

    return null;
  }
}

// Exportar app e fun√ß√£o para obter Firestore
export { app as firebaseApp };

// Fun√ß√£o para obter Firestore (inicializa se necess√°rio)
export async function getFirestoreDB() {
  if (!db) {
    db = await initializeFirestore();
  }
  return db;
}

// Fun√ß√£o simples para verificar se funciona
export function isFirestoreWorking(): boolean {
  return db !== null;
}

// Log do estado
console.log("üî• Firebase configurado:");
console.log("  - App:", !!app);
console.log("  - Projeto:", app.options.projectId);
console.log("  - Firestore:", "ser√° inicializado assincronamente");
