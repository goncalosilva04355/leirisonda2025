// Configura√ß√£o Firebase SEMPRE ATIVA - funciona em desenvolvimento e produ√ß√£o
import { FirebaseApp, initializeApp, getApps, getApp } from "firebase/app";
import { getFirebaseConfig } from "../config/firebaseEnv";

// SEMPRE for√ßar Firebase ativo
const FIREBASE_ALWAYS_ACTIVE = true;

// Vari√°vel para armazenar a inst√¢ncia do Firebase
let firebaseApp: FirebaseApp | null = null;

console.log("üî• Firebase PRODU√á√ÉO: Sempre ativo");
console.log("üåê Modo de produ√ß√£o: Firebase for√ßado");
console.log("‚úÖ Configura√ß√£o garantida para funcionar");

// Inicializar Firebase SEMPRE
try {
  console.log("üî• Iniciando Firebase (modo produ√ß√£o for√ßado)...");

  let config;
  try {
    config = getFirebaseConfig();
    console.log("üîß Firebase Project:", config.projectId);
    console.log("‚úÖ Configura√ß√£o carregada com sucesso");
  } catch (configError) {
    console.error("‚ùå Erro ao obter config Firebase:", configError);
    // Fallback configuration error - environment variables required
    throw new Error(
      "Firebase configuration failed. Environment variables VITE_FIREBASE_* are required.",
    );
    console.log("üîß Usando configura√ß√£o fixa como fallback");
  }

  if (config) {
    if (getApps().length === 0) {
      console.log("üéÜ Inicializando nova Firebase App...");
      firebaseApp = initializeApp(config);
      console.log("‚úÖ Firebase inicializado com sucesso", firebaseApp.name);
      console.log("üîç Project ID ativo:", firebaseApp.options.projectId);
    } else {
      firebaseApp = getApp();
      console.log("‚úÖ Firebase j√° estava inicializado", firebaseApp.name);
    }
  }
} catch (error: any) {
  console.error("‚ùå Erro ao inicializar Firebase:", error.message);
  console.error("üîç Stack trace:", error.stack);

  // Tentar novamente com configura√ß√£o fixa
  try {
    console.error(
      "‚ùå Environment variables VITE_FIREBASE_* are required for Firebase configuration.",
    );

    if (getApps().length === 0) {
      firebaseApp = initializeApp(fallbackConfig);
      console.log("‚úÖ Firebase inicializado com configura√ß√£o fallback");
    }
  } catch (fallbackError) {
    console.error("‚ùå Erro mesmo com configura√ß√£o fallback:", fallbackError);
  }
}

// Fun√ß√£o robusta para obter a app Firebase
export function getFirebaseApp(): FirebaseApp | null {
  // Tentar inicializar se ainda n√£o foi feito
  if (!firebaseApp) {
    try {
      let config;
      try {
        config = getFirebaseConfig();
      } catch {
        throw new Error(
          "Firebase configuration failed. Environment variables VITE_FIREBASE_* are required.",
        );
      }

      if (getApps().length === 0) {
        firebaseApp = initializeApp(config);
        console.log("‚úÖ Firebase inicializado tardiamente");
      } else {
        firebaseApp = getApp();
      }
    } catch (error: any) {
      console.error("‚ùå Erro na inicializa√ß√£o tardia:", error.message);
    }
  }

  return firebaseApp;
}

// Fun√ß√£o para verificar se Firebase est√° pronto
export function isFirebaseReady(): boolean {
  return firebaseApp !== null;
}

// Fun√ß√£o para obter auth seguro
export async function getAuth() {
  try {
    if (!firebaseApp) {
      console.error("üîê Firebase App n√£o inicializada para Auth");
      return null;
    }
    const { getAuth: getFirebaseAuth } = await import("firebase/auth");
    return getFirebaseAuth(firebaseApp);
  } catch (error: any) {
    console.error("üîê Erro ao obter Auth:", error.message);
    return null;
  }
}

// Fun√ßÔøΩÔøΩes de compatibilidade
export const getAuthService = async () => {
  return getAuth();
};

export const getDBAsync = async () => {
  // Implementar quando necess√°rio
  return null;
};

export const attemptFirestoreInit = async () => {
  return getFirebaseApp();
};

export const waitForFirebaseInit = () => Promise.resolve(firebaseApp !== null);
export const isFirebaseAuthAvailable = () => firebaseApp !== null;
export const isFirebaseFirestoreAvailable = () => firebaseApp !== null;

// Export auth como inst√¢ncia
export const auth = getAuth();

// Export db como null (ser√° implementado quando necess√°rio)
export const db = null;

// Export app como inst√¢ncia
export const app = firebaseApp;

// Export principal
export { firebaseApp };
export default firebaseApp;
