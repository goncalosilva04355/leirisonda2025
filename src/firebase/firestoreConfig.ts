// Passo 3: Configura√ß√£o Firestore - base de dados na nuvem
import { getFirestore, Firestore } from "firebase/firestore";
import { getFirebaseApp } from "./basicConfig";

// Vari√°vel para armazenar a inst√¢ncia do Firestore
let firestoreInstance: Firestore | null = null;

// Fun√ß√£o robusta para inicializar Firestore com verifica√ß√µes de estado
function initializeFirestore(): Firestore | null {
  try {
    // Verificar se j√° temos uma inst√¢ncia v√°lida
    if (firestoreInstance) {
      console.log("‚úÖ Firestore: Inst√¢ncia existente v√°lida");
      return firestoreInstance;
    }

    const app = getFirebaseApp();

    if (!app) {
      console.warn("‚ö†Ô∏è Firebase App n√£o dispon√≠vel ainda para Firestore");
      return null;
    }

    // Verificar se a app n√£o foi deletada
    try {
      // Teste simples para verificar se a app √© v√°lida
      const projectId = app.options.projectId;
      if (!projectId) {
        console.warn("‚ö†Ô∏è Firebase App inv√°lida (sem projectId)");
        return null;
      }
    } catch (appError) {
      console.warn("‚ö†Ô∏è Firebase App n√£o √© v√°lida:", appError);
      return null;
    }

    // Inicializar Firestore apenas se a app for v√°lida
    try {
      firestoreInstance = getFirestore(app);
      console.log("‚úÖ Firestore: Inicializado com sucesso");
      console.log("üî• Firestore sempre ativo - dados sincronizados");
      return firestoreInstance;
    } catch (firestoreError: any) {
      console.error(
        "‚ùå Firestore: Erro espec√≠fico na inicializa√ß√£o:",
        firestoreError,
      );

      // Se for erro de app deletada, limpar refer√™ncia
      if (firestoreError.code === "app/app-deleted") {
        console.log("üßπ Firestore: App foi deletada, limpando refer√™ncia");
        firestoreInstance = null;
      }

      return null;
    }
  } catch (error: any) {
    console.error("‚ùå Firestore: Erro geral na inicializa√ß√£o:", error);
    return null;
  }
}

// Fun√ß√£o para obter o Firestore
export function getFirebaseFirestore(): Firestore | null {
  if (!firestoreInstance) {
    return initializeFirestore();
  }
  return firestoreInstance;
}

// Fun√ß√£o para verificar se Firestore est√° pronto
export function isFirestoreReady(): boolean {
  return firestoreInstance !== null;
}

// Fun√ß√£o de teste simples para Firestore
export async function testFirestore(): Promise<boolean> {
  try {
    const db = getFirebaseFirestore();
    if (!db) {
      console.log("üì± Firestore n√£o dispon√≠vel - modo local ativo");
      return false;
    }

    console.log("‚úÖ Firestore dispon√≠vel e pronto para uso");
    return true;
  } catch (error) {
    console.warn("‚ö†Ô∏è Teste Firestore falhou:", error);
    return false;
  }
}

// Inicializar Firestore automaticamente ap√≥s um pequeno delay
setTimeout(() => {
  initializeFirestore();
}, 800);

// Exporta√ß√µes
export { firestoreInstance };
export default firestoreInstance;
