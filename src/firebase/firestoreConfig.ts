// Passo 3: Configura√ß√£o Firestore - base de dados na nuvem
import { getFirestore, Firestore } from "firebase/firestore";
import { getFirebaseApp, getFirebaseAppAsync } from "./basicConfig";

// Vari√°vel para armazenar a inst√¢ncia do Firestore
let firestoreInstance: Firestore | null = null;
let firestoreInitPromise: Promise<Firestore | null> | null = null;

// Fun√ß√£o ass√≠ncrona robusta para inicializar Firestore
async function initializeFirestoreAsync(): Promise<Firestore | null> {
  // Se j√° estamos inicializando, retornar a promise existente
  if (firestoreInitPromise) {
    return firestoreInitPromise;
  }

  // Se j√° temos uma inst√¢ncia v√°lida, retorn√°-la
  if (firestoreInstance) {
    console.log("‚úÖ Firestore: Inst√¢ncia existente v√°lida");
    return firestoreInstance;
  }

  // Criar promise de inicializa√ß√£o
  firestoreInitPromise = (async () => {
    try {
      // Aguardar Firebase App estar completamente pronta
      const app = await getFirebaseAppAsync();

      if (!app) {
        console.warn("‚ö†Ô∏è Firebase App n√£o dispon√≠vel para Firestore");
        return null;
      }

      // Aguardar a app estar completamente pronta
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Verificar se a app n√£o foi deletada com valida√ß√£o mais robusta
      try {
        const projectId = app.options?.projectId;
        const authDomain = app.options?.authDomain;

        if (!projectId || !authDomain) {
          console.warn(
            "‚ö†Ô∏è Firebase App inv√°lida (faltam configura√ß√µes essenciais)",
          );
          return null;
        }

        // Verificar se a app est√° na lista de apps v√°lidas
        const { getApps } = await import("firebase/app");
        const validApps = getApps();
        if (!validApps.includes(app)) {
          console.warn("‚ö†Ô∏è Firebase App n√£o est√° na lista de apps v√°lidas");
          return null;
        }

        // Teste adicional: verificar se a app ainda responde
        const appName = app.name;
        if (!appName) {
          console.warn("‚ö†Ô∏è Firebase App sem nome v√°lido");
          return null;
        }
      } catch (appError) {
        console.warn("‚ö†Ô∏è Firebase App n√£o √© v√°lida:", appError);
        return null;
      }

      // Inicializar Firestore com retry autom√°tico e valida√ß√£o mais rigorosa
      let retryCount = 0;
      const maxRetries = 5;

      while (retryCount < maxRetries) {
        try {
          // Aguardar progressivamente mais tempo em cada tentativa
          if (retryCount > 0) {
            const waitTime = Math.min(5000 * retryCount, 15000);
            console.log(
              `üîÑ Aguardando ${waitTime}ms antes da tentativa ${retryCount + 1}...`,
            );
            await new Promise((resolve) => setTimeout(resolve, waitTime));
          }

          // Re-verificar se a app ainda √© v√°lida antes de cada tentativa
          const { getApps } = await import("firebase/app");
          const currentApps = getApps();
          if (!currentApps.includes(app)) {
            throw new Error("Firebase App n√£o est√° mais v√°lida");
          }

          // Tentar inicializar Firestore
          firestoreInstance = getFirestore(app);
          console.log("‚úÖ Firestore: Inicializado com sucesso (ass√≠ncrono)");
          console.log("üî• Firestore sempre ativo - dados sincronizados");
          return firestoreInstance;
        } catch (firestoreError: any) {
          retryCount++;
          console.warn(
            `‚ö†Ô∏è Firestore: Tentativa ${retryCount}/${maxRetries} falhou:`,
            firestoreError.code || firestoreError.message,
          );

          // Se foi a √∫ltima tentativa
          if (retryCount === maxRetries) {
            console.error(
              "‚ùå Firestore: Erro espec√≠fico na inicializa√ß√£o ap√≥s todas as tentativas:",
              firestoreError,
            );

            // Se for erro de app deletada, limpar refer√™ncia
            if (firestoreError.code === "app/app-deleted") {
              console.log(
                "üßπ Firestore: App foi deletada, limpando refer√™ncia",
              );
              firestoreInstance = null;
            }

            return null;
          }
        }
      }

      // Se chegou aqui, todas as tentativas falharam (n√£o deve acontecer)
      return null;
    } catch (error: any) {
      console.error(
        "‚ùå Firestore: Erro geral na inicializa√ß√£o ass√≠ncrona:",
        error,
      );
      return null;
    } finally {
      // Limpar promise ap√≥s conclus√£o
      firestoreInitPromise = null;
    }
  })();

  return firestoreInitPromise;
}

// Fun√ß√£o s√≠ncrona para compatibilidade (pode retornar null se n√£o estiver pronta)
function initializeFirestore(): Firestore | null {
  // Se j√° temos inst√¢ncia, retorn√°-la
  if (firestoreInstance) {
    return firestoreInstance;
  }

  // Tentar inicializa√ß√£o s√≠ncrona apenas se Firebase App j√° existir
  const app = getFirebaseApp();
  if (!app) {
    console.warn(
      "‚ö†Ô∏è Firebase App n√£o dispon√≠vel para Firestore (modo s√≠ncrono)",
    );

    // Iniciar inicializa√ß√£o ass√≠ncrona em background
    initializeFirestoreAsync().catch((error) => {
      console.error(
        "‚ùå Firestore: Erro na inicializa√ß√£o ass√≠ncrona em background:",
        error,
      );
    });

    return null;
  }

  try {
    // Verificar se a app √© v√°lida
    const projectId = app.options.projectId;
    if (!projectId) {
      console.warn("‚ö†Ô∏è Firebase App inv√°lida (sem projectId) no modo s√≠ncrono");
      return null;
    }

    // Tentar inicializar Firestore
    firestoreInstance = getFirestore(app);
    console.log("ÔøΩÔøΩ Firestore: Inicializado com sucesso (s√≠ncrono)");
    return firestoreInstance;
  } catch (firestoreError: any) {
    console.warn(
      "‚ö†Ô∏è Firestore: Erro na inicializa√ß√£o s√≠ncrona:",
      firestoreError,
    );

    // Iniciar inicializa√ß√£o ass√≠ncrona em background
    initializeFirestoreAsync().catch((error) => {
      console.error(
        "‚ùå Firestore: Erro na inicializa√ß√£o ass√≠ncrona em background:",
        error,
      );
    });

    return null;
  }
}

// Fun√ß√£o para obter o Firestore (s√≠ncrona)
export function getFirebaseFirestore(): Firestore | null {
  if (!firestoreInstance) {
    return initializeFirestore();
  }
  return firestoreInstance;
}

// Fun√ß√£o ass√≠ncrona para obter o Firestore
export async function getFirebaseFirestoreAsync(): Promise<Firestore | null> {
  return await initializeFirestoreAsync();
}

// Fun√ß√£o para verificar se Firestore est√° pronto
export function isFirestoreReady(): boolean {
  return firestoreInstance !== null;
}

// Fun√ß√£o de teste simples para Firestore
export async function testFirestore(): Promise<boolean> {
  try {
    const db = getFirebaseFirestore();
    if (!db) {
      console.log("üì± Firestore n√£o dispon√≠vel - modo local ativo");
      return false;
    }

    console.log("‚úÖ Firestore dispon√≠vel e pronto para uso");
    return true;
  } catch (error) {
    console.warn("‚ö†Ô∏è Teste Firestore falhou:", error);
    return false;
  }
}

// Inicializa√ß√£o lazy do Firestore - apenas quando necess√°rio
// setTimeout(() => { initializeFirestore(); }, 800); // Removido para evitar conflitos

// Exporta√ß√µes
export { firestoreInstance };
export default firestoreInstance;
