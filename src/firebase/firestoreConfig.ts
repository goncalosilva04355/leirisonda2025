// Configura√ß√£o Firestore ativa
import {
  Firestore,
  getFirestore,
  connectFirestoreEmulator,
  doc,
  getDoc,
} from "firebase/firestore";
import { getApps, getApp } from "firebase/app";

// Estado: Firestore inteligente - s√≥ ativa se dispon√≠vel
const LOCAL_MODE = import.meta.env.DEV;
const IS_NETLIFY_BUILD =
  import.meta.env.NETLIFY === "true" ||
  import.meta.env.VITE_IS_NETLIFY === "true";
const FORCE_FIRESTORE_PRODUCTION = true; // SEMPRE ATIVO - DEV E PROD

// Flag para controlar se j√° verificamos a disponibilidade do Firestore
let firestoreAvailabilityChecked = false;
let firestoreIsAvailable = false;

// Vari√°vel para armazenar a inst√¢ncia do Firestore
let firestoreInstance: Firestore | null = null;

// Fun√ß√£o para aguardar Firebase App estar pronto
async function waitForFirebaseApp(
  maxAttempts = 10,
  delay = 1000,
): Promise<any> {
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    try {
      const apps = getApps();
      if (apps.length > 0) {
        const app = getApp();
        // Verificar se a app tem as propriedades necess√°rias
        if (app.options.projectId && app.options.apiKey) {
          console.log(`‚úÖ Firebase App pronta na tentativa ${attempt}`);
          return app;
        }
      }
    } catch (error) {
      console.log(
        `‚ö†Ô∏è Tentativa ${attempt} - Firebase App ainda n√£o dispon√≠vel`,
      );
    }

    console.log(
      `‚è≥ Tentativa ${attempt}/${maxAttempts} - aguardando Firebase App...`,
    );
    await new Promise((resolve) => setTimeout(resolve, delay));
  }

  throw new Error("Firebase App n√£o inicializou ap√≥s aguardar");
}

// FunÔøΩÔøΩ√£o para verificar se Firestore est√° dispon√≠vel no projeto
async function checkFirestoreAvailability(app: any): Promise<boolean> {
  // Se j√° verificamos, retornar o resultado cached
  if (firestoreAvailabilityChecked) {
    return firestoreIsAvailable;
  }

  try {
    // Tentar importar Firestore usando getImmediate para verificar disponibilidade
    const { getFirestore } = await import("firebase/firestore");
    const db = getFirestore(app);
    console.log("‚úÖ Firestore dispon√≠vel no projeto:", app.options.projectId);

    firestoreAvailabilityChecked = true;
    firestoreIsAvailable = true;
    return true;
  } catch (error: any) {
    firestoreAvailabilityChecked = true;
    firestoreIsAvailable = false;

    if (
      error.code === "firestore/unavailable" ||
      error.message.includes("Service firestore is not available")
    ) {
      console.warn(
        `‚ö†Ô∏è Firestore n√£o habilitado no projeto ${app.options.projectId}`,
      );
      console.info(
        "ÔøΩÔøΩ Para habilitar: Firebase Console ‚Üí Firestore Database ‚Üí Criar base de dados",
      );
      console.info(
        `üîó https://console.firebase.google.com/project/${app.options.projectId}/firestore`,
      );
      console.info("üì± Aplica√ß√£o funcionar√° perfeitamente com localStorage");
      return false;
    }
    console.error("‚ùå Erro inesperado ao verificar Firestore:", error);
    return false;
  }
}

// Fun√ß√£o para inicializar Firestore com retry
async function initializeFirestore(
  retryCount = 0,
  maxRetries = 2,
): Promise<Firestore | null> {
  // Firestore sempre ativo - sem condi√ß√µes de bloqueio

  try {
    console.log(
      `üíæ Tentando inicializar Firestore... (tentativa ${retryCount + 1}/${maxRetries + 1})`,
    );

    // Verificar se Firebase tem apps dispon√≠veis
    const apps = getApps();
    if (apps.length === 0) {
      console.log("üì± Firebase n√£o inicializado ainda, aguardando...");
      throw new Error("Firebase App n√£o inicializada");
    }

    // Aguardar Firebase App estar pronto
    const app = await waitForFirebaseApp();

    console.log("üéÜ Firebase App confirmada:", {
      name: app.name,
      projectId: app.options.projectId,
      authDomain: app.options.authDomain,
    });

    // Verificar se Firestore est√° dispon√≠vel neste projeto
    const firestoreAvailable = await checkFirestoreAvailability(app);

    if (!firestoreAvailable) {
      // Silenciosamente retorna null - checkFirestoreAvailability j√° mostrou a informa√ß√£o necess√°ria
      return null;
    }

    // Aguardar um pouco mais para garantir que os serviÔøΩÔøΩos est√£o prontos
    await new Promise((resolve) => setTimeout(resolve, 500));

    console.log("üíæ Chamando getFirestore()...");
    const db = getFirestore(app);
    console.log("ÔøΩÔøΩ Firestore inicializado com sucesso", typeof db);

    // Teste r√°pido para verificar se realmente funciona
    console.log("üß™ Testando conectividade Firestore...");
    const testRef = doc(db, "__test__", "connection");
    // N√£o fazer getDoc ainda, apenas criar a refer√™ncia
    console.log("‚úÖ Refer√™ncia de teste criada com sucesso");

    return db;
  } catch (error: any) {
    console.error(
      `‚ùå Erro ao inicializar Firestore (tentativa ${retryCount + 1}):`,
      error.message,
    );
    console.error("üîç Error code:", error.code);

    // Se √© erro de Firestore n√£o dispon√≠vel, n√£o tentar novamente
    if (
      error.code === "firestore/unavailable" ||
      error.message.includes("Service firestore is not available")
    ) {
      console.error(
        "‚ùå Firestore n√£o est√° habilitado - n√£o tentando novamente",
      );
      console.error(
        "üí° A aplica√ß√£o continuar√° funcionando com localStorage apenas",
      );
      return null;
    }

    if (retryCount < maxRetries) {
      const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff
      console.log(`üîÑ Tentando novamente em ${delay}ms...`);
      await new Promise((resolve) => setTimeout(resolve, delay));
      return initializeFirestore(retryCount + 1, maxRetries);
    }

    // Todas as tentativas falharam
    console.error("‚ùå Firestore falhou ap√≥s todas as tentativas");
    console.error(
      "üíæ A aplica√ß√£o continuar√° funcionando apenas com localStorage",
    );
    console.error("üîç Stack trace original:", error.stack);
    return null;
  }
}

// Tentar inicializar Firestore se for√ßado ou em produ√ß√£o
if (FORCE_FIRESTORE_PRODUCTION) {
  console.log("üî• Verificando disponibilidade do Firestore...");
  // Usar setTimeout ass√≠ncrono para garantir que Firebase App foi inicializado primeiro
  setTimeout(async () => {
    if (!firestoreInstance) {
      console.log("üîç Testando Firestore no projeto...");
      firestoreInstance = await initializeFirestore();
      if (firestoreInstance) {
        console.log("‚úÖ Firestore ativo e funcional");
      } else {
        console.info(
          "üì± Modo localStorage ativo - aplica√ß√£o funcionar√° normalmente",
        );
      }
    }
  }, 1000);
} else {
  console.log("‚è∏Ô∏è Firestore verifica√ß√£o adiada - aguardando deploy no Netlify");
}

// Fun√ß√£o principal para obter Firestore (s√≠ncrona - pode retornar null se ainda n√£o inicializado)
export function getFirebaseFirestore(): Firestore | null {
  // Firestore sempre dispon√≠vel - sem condi√ß√µes de bloqueio

  if (!firestoreInstance) {
    console.warn(
      "‚ö†Ô∏è Firestore ainda n√£o foi inicializado - use getFirebaseFirestoreAsync()",
    );
    // Tentar inicializar imediatamente
    initializeFirestore().then((db) => {
      firestoreInstance = db;
    });
  }

  return firestoreInstance;
}

// Fun√ß√£o ass√≠ncrona para obter Firestore (recomendada)
export async function getFirebaseFirestoreAsync(): Promise<Firestore | null> {
  // Remover bloqueio - Firestore sempre dispon√≠vel
  console.log("üî• Inicializando Firestore...");

  // Tentar inicializar se ainda n√£o foi feito
  if (!firestoreInstance) {
    console.log("üîÑ Inicializando Firestore assincronamente...");
    firestoreInstance = await initializeFirestore();
    if (!firestoreInstance) {
      // Only log as warning in development to avoid confusion
      if (import.meta.env.DEV) {
        console.warn(
          "‚ö†Ô∏è Firestore n√£o dispon√≠vel em modo de desenvolvimento - aplica√ß√£o funciona com localStorage",
        );
      } else {
        console.error("‚ùå Firestore n√£o conseguiu ser inicializado");
      }
    }
  }

  return firestoreInstance;
}

// Fun√ß√£o para verificar se Firestore est√° pronto
export function isFirestoreReady(): boolean {
  // Remover bloqueio - verificar apenas se inst√¢ncia existe
  return firestoreInstance !== null;
}

// Fun√ß√£o de teste simples para Firestore
export async function testFirestore(): Promise<boolean> {
  // Remover bloqueio - sempre testar Firestore
  console.log("üß™ Testando Firestore...");

  try {
    const db = getFirebaseFirestore();
    if (!db) {
      console.error("‚ùå Firestore n√£o dispon√≠vel para teste");
      return false;
    }

    // Teste simples de conectividade
    const testDoc = doc(db, "test", "connection");
    await getDoc(testDoc);

    console.log("‚úÖ Teste Firestore: conectividade OK");
    return true;
  } catch (error: any) {
    console.error("‚ùå Teste Firestore falhou:", error.message);
    return false;
  }
}

// Fun√ß√£o para for√ßar inicializa√ß√£o
export async function forceFirestoreInit(): Promise<boolean> {
  // Remover bloqueio - sempre permitir inicializa√ß√£o for√ßada
  console.log("üîÑ For√ßando inicializa√ß√£o...");

  try {
    console.log("üîÑ For√ßando inicializa√ß√£o Firestore...");
    firestoreInstance = await initializeFirestore();

    if (firestoreInstance) {
      console.log("‚úÖ Firestore inicializa√ß√£o for√ßada com sucesso");
      return true;
    } else {
      console.error("‚ùå For√ßar inicializa√ß√£o falhou");
      return false;
    }
  } catch (error: any) {
    console.error("‚ùå Erro ao for√ßar inicializa√ß√£o Firestore:", error.message);
    return false;
  }
}

// Fun√ß√£o para limpar inst√¢ncia
export function clearFirestoreInstance(): void {
  // Remover bloqueio - sempre permitir limpeza
  firestoreInstance = null;
  console.log("üßπ Inst√¢ncia Firestore limpa");
}

// Fun√ß√£o para ativar modo local (desativada)
export function enableLocalMode(): void {
  console.log("‚ö†Ô∏è Modo local desativado - usando Firebase ativo");
  console.log("üî• Firebase/Firestore totalmente funcionais");
}

// Exporta√ßÔøΩÔøΩes
export { firestoreInstance };
export default firestoreInstance;
