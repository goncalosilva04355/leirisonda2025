// Configura√ß√£o Firestore simplificada para evitar erros getImmediate
import { getFirestore, Firestore } from "firebase/firestore";
import { getFirebaseApp, getFirebaseAppAsync } from "./basicConfig";

// Vari√°vel para armazenar a inst√¢ncia do Firestore
let firestoreInstance: Firestore | null = null;
let initPromise: Promise<Firestore | null> | null = null;

// Fun√ß√£o simples para inicializar Firestore sem erros
function safeInitializeFirestore(): Firestore | null {
  try {
    // Verificar se j√° temos uma inst√¢ncia v√°lida
    if (firestoreInstance) {
      return firestoreInstance;
    }

    // Obter Firebase App
    const app = getFirebaseApp();
    if (!app) {
      console.log("üì± Firebase App n√£o dispon√≠vel - modo local ativo");
      return null;
    }

    // Tentar inicializar Firestore de forma segura
    firestoreInstance = getFirestore(app);
    console.log("‚úÖ Firestore: Inicializado com sucesso");
    return firestoreInstance;
  } catch (error: any) {
    console.warn("‚ö†Ô∏è Firestore n√£o dispon√≠vel:", error.message || error);
    return null;
  }
}

// Fun√ß√£o ass√≠ncrona para inicializar Firestore
async function initializeFirestoreAsync(): Promise<Firestore | null> {
  // Se j√° estamos inicializando, retornar a promise existente
  if (initPromise) {
    return initPromise;
  }

  // Se j√° temos inst√¢ncia, retorn√°-la
  if (firestoreInstance) {
    return firestoreInstance;
  }

  initPromise = (async () => {
    try {
      // Aguardar Firebase App estar pronto
      const app = await getFirebaseAppAsync();
      if (!app) {
        return null;
      }

      // Aguardar um pouco para garantir que a app est√° est√°vel
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Inicializar Firestore
      firestoreInstance = getFirestore(app);
      console.log("‚úÖ Firestore: Inicializado de forma ass√≠ncrona");
      return firestoreInstance;
    } catch (error: any) {
      console.warn("‚ö†Ô∏è Firestore async init failed:", error.message || error);
      return null;
    } finally {
      initPromise = null;
    }
  })();

  return initPromise;
}

// Fun√ß√£o principal para obter Firestore
export function getFirebaseFirestore(): Firestore | null {
  return safeInitializeFirestore();
}

// Fun√ß√£o ass√≠ncrona para obter Firestore
export async function getFirebaseFirestoreAsync(): Promise<Firestore | null> {
  return await initializeFirestoreAsync();
}

// Fun√ß√£o para verificar se Firestore est√° pronto
export function isFirestoreReady(): boolean {
  return firestoreInstance !== null;
}

// Fun√ß√£o de teste simples para Firestore
export async function testFirestore(): Promise<boolean> {
  try {
    const db = getFirebaseFirestore();
    if (!db) {
      console.log("üì± Firestore n√£o dispon√≠vel - modo local ativo");
      return false;
    }

    console.log("‚úÖ Firestore dispon√≠vel e pronto para uso");
    return true;
  } catch (error) {
    console.warn("‚ö†Ô∏è Teste Firestore falhou:", error);
    return false;
  }
}

// Exporta√ß√µes
export { firestoreInstance };
export default firestoreInstance;
