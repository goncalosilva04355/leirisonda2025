// Configura√ß√£o Firestore ativa
import {
  Firestore,
  getFirestore,
  connectFirestoreEmulator,
} from "firebase/firestore";
import { getFirebaseApp } from "./basicConfig";

// Estado atual: Firestore ativo
const LOCAL_MODE = false;

// Vari√°vel para armazenar a inst√¢ncia do Firestore
let firestoreInstance: Firestore | null = null;

// Inicializar Firestore automaticamente
if (!LOCAL_MODE) {
  try {
    const app = getFirebaseApp();
    if (app) {
      firestoreInstance = getFirestore(app);
      console.log("‚úÖ Firestore inicializado com sucesso");
    } else {
      console.warn("‚ö†Ô∏è Firebase App n√£o dispon√≠vel para inicializar Firestore");
    }
  } catch (error: any) {
    console.error("‚ùå Erro ao inicializar Firestore:", error.message);
  }
}

// Fun√ß√£o principal para obter Firestore
export function getFirebaseFirestore(): Firestore | null {
  if (LOCAL_MODE) {
    console.log("üì± Firestore em modo local - dados guardados no localStorage");
    return null;
  }

  // Tentar inicializar se ainda n√£o foi feito
  if (!firestoreInstance) {
    try {
      const app = getFirebaseApp();
      if (app) {
        firestoreInstance = getFirestore(app);
        console.log("‚úÖ Firestore inicializado tardiamente");
      }
    } catch (error: any) {
      console.error(
        "‚ùå Erro na inicializa√ß√£o tardia do Firestore:",
        error.message,
      );
    }
  }

  return firestoreInstance;
}

// Fun√ß√£o ass√≠ncrona para obter Firestore
export async function getFirebaseFirestoreAsync(): Promise<Firestore | null> {
  if (LOCAL_MODE) {
    console.log("üì± Firestore em modo local - dados guardados no localStorage");
    return null;
  }

  // Tentar inicializar se ainda n√£o foi feito
  if (!firestoreInstance) {
    try {
      const app = getFirebaseApp();
      if (app) {
        firestoreInstance = getFirestore(app);
        console.log("‚úÖ Firestore inicializado assincronamente");
      }
    } catch (error: any) {
      console.error(
        "‚ùå Erro na inicializa√ß√£o ass√≠ncrona do Firestore:",
        error.message,
      );
    }
  }

  return firestoreInstance;
}

// Fun√ß√£o para verificar se Firestore est√° pronto
export function isFirestoreReady(): boolean {
  if (LOCAL_MODE) return false;
  return firestoreInstance !== null;
}

// Fun√ß√£o de teste simples para Firestore
export async function testFirestore(): Promise<boolean> {
  if (LOCAL_MODE) {
    console.log("üì± Firestore teste: modo local ativo");
    return false;
  }

  try {
    const db = getFirebaseFirestore();
    if (!db) {
      console.error("‚ùå Firestore n√£o dispon√≠vel para teste");
      return false;
    }

    // Teste simples de conectividade
    const testDoc = doc(db, "test", "connection");
    await getDoc(testDoc);

    console.log("‚úÖ Teste Firestore: conectividade OK");
    return true;
  } catch (error: any) {
    console.error("‚ùå Teste Firestore falhou:", error.message);
    return false;
  }
}

// Imports necess√°rios
import { doc, getDoc } from "firebase/firestore";

// Fun√ß√£o para for√ßar inicializa√ß√£o
export async function forceFirestoreInit(): Promise<boolean> {
  if (LOCAL_MODE) {
    console.log("üì± Firestore for√ßado: modo local ativo");
    return false;
  }

  try {
    const app = getFirebaseApp();
    if (!app) {
      console.error("‚ùå Firebase App n√£o dispon√≠vel para for√ßar Firestore");
      return false;
    }

    firestoreInstance = getFirestore(app);
    console.log("‚úÖ Firestore inicializa√ß√£o for√ßada com sucesso");
    return true;
  } catch (error: any) {
    console.error("‚ùå Erro ao for√ßar inicializa√ß√£o Firestore:", error.message);
    return false;
  }
}

// Fun√ß√£o para limpar inst√¢ncia
export function clearFirestoreInstance(): void {
  if (LOCAL_MODE) {
    console.log("üßπ Firestore limpo: modo local ativo");
    return;
  }

  firestoreInstance = null;
  console.log("üßπ Inst√¢ncia Firestore limpa");
}

// Fun√ß√£o para ativar modo local (desativada)
export function enableLocalMode(): void {
  console.log("‚ö†Ô∏è Modo local desativado - usando Firebase ativo");
  console.log("üî• Firebase/Firestore totalmente funcionais");
}

// Exporta√ß√µes
export { firestoreInstance };
export default firestoreInstance;
