// Configura√ß√£o Firestore ultra-robusta para evitar completamente erros getImmediate
import { Firestore } from "firebase/firestore";

// Vari√°vel para armazenar a inst√¢ncia do Firestore
let firestoreInstance: Firestore | null = null;
let isInitializing = false;

// Fun√ß√£o ultra-segura para inicializar Firestore
async function ultraSafeInitializeFirestore(): Promise<Firestore | null> {
  // Evitar m√∫ltiplas inicializa√ß√µes simult√¢neas
  if (isInitializing) {
    console.log("üîÑ Firestore j√° est√° a ser inicializado, aguardando...");
    // Aguardar um pouco e verificar novamente
    await new Promise((resolve) => setTimeout(resolve, 500));
    return firestoreInstance;
  }

  // Se j√° temos inst√¢ncia, retorn√°-la
  if (firestoreInstance) {
    return firestoreInstance;
  }

  isInitializing = true;

  try {
    // Importar dinamicamente para evitar problemas de inicializa√ß√£o
    const { getFirestore } = await import("firebase/firestore");
    const { getFirebaseApp } = await import("./basicConfig");

    // Aguardar Firebase App estar completamente pronto
    await new Promise((resolve) => setTimeout(resolve, 2000));

    const app = getFirebaseApp();
    if (!app) {
      console.log("üì± Firebase App n√£o dispon√≠vel - modo local ativo");
      return null;
    }

    // Verificar se a app tem as configura√ß√µes necess√°rias
    if (!app.options?.projectId) {
      console.warn("‚ö†Ô∏è Firebase App sem projectId v√°lido");
      return null;
    }

    // Tentar inicializar Firestore com m√∫ltiplas tentativas
    let attempts = 0;
    const maxAttempts = 3;

    while (attempts < maxAttempts) {
      try {
        // Aguardar progressivamente mais tempo em cada tentativa
        if (attempts > 0) {
          await new Promise((resolve) => setTimeout(resolve, 1000 * attempts));
        }

        firestoreInstance = getFirestore(app);
        console.log(
          "‚úÖ Firestore: Inicializado com sucesso (tentativa " +
            (attempts + 1) +
            ")",
        );
        return firestoreInstance;
      } catch (error: any) {
        attempts++;
        console.warn(
          `‚ö†Ô∏è Firestore tentativa ${attempts}/${maxAttempts} falhou:`,
          error.message || error,
        );

        if (attempts === maxAttempts) {
          console.error("‚ùå Firestore: Todas as tentativas falharam");
          return null;
        }
      }
    }

    return null;
  } catch (error: any) {
    console.warn(
      "‚ö†Ô∏è Erro geral na inicializa√ß√£o Firestore:",
      error.message || error,
    );
    return null;
  } finally {
    isInitializing = false;
  }
}

// Fun√ß√£o principal para obter Firestore (sempre segura)
export function getFirebaseFirestore(): Firestore | null {
  // Se j√° temos inst√¢ncia, retorn√°-la imediatamente
  if (firestoreInstance) {
    return firestoreInstance;
  }

  // Se n√£o temos inst√¢ncia, inicializar em background
  ultraSafeInitializeFirestore().catch((error) => {
    console.warn("‚ö†Ô∏è Inicializa√ß√£o Firestore em background falhou:", error);
  });

  // Retornar null por agora (app funcionar√° em modo local)
  return null;
}

// Fun√ß√£o ass√≠ncrona para obter Firestore
export async function getFirebaseFirestoreAsync(): Promise<Firestore | null> {
  // Se j√° temos inst√¢ncia, retorn√°-la
  if (firestoreInstance) {
    return firestoreInstance;
  }

  // Tentar inicializar
  return await ultraSafeInitializeFirestore();
}

// Fun√ß√£o para verificar se Firestore est√° pronto
export function isFirestoreReady(): boolean {
  return firestoreInstance !== null;
}

// Fun√ß√£o de teste simples para Firestore
export async function testFirestore(): Promise<boolean> {
  try {
    const db = await getFirebaseFirestoreAsync();
    if (!db) {
      console.log("üì± Firestore n√£o dispon√≠vel - modo local ativo");
      return false;
    }

    console.log("‚úÖ Firestore dispon√≠vel e pronto para uso");
    return true;
  } catch (error) {
    console.warn("‚ö†Ô∏è Teste Firestore falhou:", error);
    return false;
  }
}

// Fun√ß√£o para for√ßar inicializa√ß√£o (√∫til para debugging)
export async function forceFirestoreInit(): Promise<boolean> {
  try {
    firestoreInstance = null; // Reset
    isInitializing = false; // Reset
    const db = await ultraSafeInitializeFirestore();
    return db !== null;
  } catch (error) {
    console.error("‚ùå Erro ao for√ßar inicializa√ß√£o Firestore:", error);
    return false;
  }
}

// Fun√ß√£o para limpar inst√¢ncia (√∫til para debugging)
export function clearFirestoreInstance(): void {
  firestoreInstance = null;
  isInitializing = false;
  console.log("üßπ Inst√¢ncia Firestore limpa");
}

// Exporta√ß√µes
export { firestoreInstance };
export default firestoreInstance;
