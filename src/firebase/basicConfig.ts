// Configura√ß√£o Firebase b√°sica ativa
import { FirebaseApp, initializeApp, getApps, getApp } from "firebase/app";
import { getFirebaseConfig } from "../config/firebaseEnv";
import { getAuth as getFirebaseAuth } from "firebase/auth";

// Estado: Firebase apenas ativo no Netlify (produ√ß√£o)
const LOCAL_MODE = import.meta.env.DEV;
const IS_NETLIFY_BUILD =
  import.meta.env.NETLIFY === "true" ||
  import.meta.env.VITE_IS_NETLIFY === "true";
const FORCE_FIREBASE_PRODUCTION = true; // SEMPRE ATIVO - REATIVADO PARA DEV E PROD

// Vari√°vel para armazenar a inst√¢ncia do Firebase
let firebaseApp: FirebaseApp | null = null;

// Wrapper para desenvolvimento e detec√ß√£o do Netlify
console.log("üîç Environment Check:");
console.log("  - LOCAL_MODE (DEV):", LOCAL_MODE);
console.log("  - NETLIFY:", import.meta.env.NETLIFY);
console.log("  - VITE_IS_NETLIFY:", import.meta.env.VITE_IS_NETLIFY);
console.log("  - IS_NETLIFY_BUILD:", IS_NETLIFY_BUILD);
console.log("  - VITE_FORCE_FIREBASE:", import.meta.env.VITE_FORCE_FIREBASE);
console.log("  - FORCE_FIREBASE_PRODUCTION:", FORCE_FIREBASE_PRODUCTION);

if (!IS_NETLIFY_BUILD && import.meta.env.VITE_FORCE_FIREBASE !== "true") {
  console.log("üö´ Firebase DESATIVADO - n√£o est√° no Netlify");
  console.log("üìù Usar apenas localStorage durante desenvolvimento");
  console.log("ÔøΩÔøΩÔøΩ Firebase ser√° ativo automaticamente ap√≥s deploy no Netlify");
  console.log("üîç Para testar Firebase localmente: VITE_FORCE_FIREBASE=true");
} else {
  console.log("üî• Firebase ATIVO - rodando no Netlify ou for√ßado");
  console.log("üåê Ambiente de produ√ß√£o detectado");
  console.log("‚úÖ Suas vari√°veis VITE_FIREBASE_* do Netlify ser√£o usadas");
}

// Inicializar Firebase apenas no Netlify (produ√ß√£o)
if (FORCE_FIREBASE_PRODUCTION) {
  try {
    console.log("üî• Iniciando Firebase no ambiente de produ√ß√£o (Netlify)...");
    const config = getFirebaseConfig();
    console.log("üîß Firebase Project:", config.projectId);
    console.log("üåê Netlify Build:", IS_NETLIFY_BUILD);

    if (getApps().length === 0) {
      console.log("üéÜ Inicializando nova Firebase App...");
      firebaseApp = initializeApp(config);
      console.log(
        "‚úÖ Firebase inicializado com sucesso no Netlify",
        firebaseApp.name,
      );
      console.log("üîç Project ID ativo:", firebaseApp.options.projectId);
    } else {
      firebaseApp = getApp();
      console.log(
        "‚úÖ Firebase j√° estava inicializado no Netlify",
        firebaseApp.name,
      );
    }
  } catch (error: any) {
    console.error("‚ùå Erro ao inicializar Firebase no Netlify:", error.message);
    console.error("üîç Stack trace:", error.stack);
    console.log("üìù Verifique as vari√°veis de ambiente do Netlify");
  }
} else {
  console.log(
    "‚è∏Ô∏è Firebase inicializa√ß√£o adiada - aguardando deploy no Netlify",
  );
}

// Fun√ß√£o robusta para obter a app Firebase
export function getFirebaseApp(): FirebaseApp | null {
  if (!IS_NETLIFY_BUILD && import.meta.env.VITE_FORCE_FIREBASE !== "true") {
    console.log("üì± Firebase App indispon√≠vel - aguardando deploy no Netlify");
    return null;
  }

  // Tentar inicializar se ainda n√£o foi feito
  if (!firebaseApp) {
    try {
      const config = getFirebaseConfig();
      if (getApps().length === 0) {
        firebaseApp = initializeApp(config);
        console.log("‚úÖ Firebase inicializado tardiamente");
      } else {
        firebaseApp = getApp();
      }
    } catch (error: any) {
      console.error("‚ùå Erro na inicializa√ß√£o tardia:", error.message);
    }
  }

  return firebaseApp;
}

// Fun√ß√£o ass√≠ncrona para obter a app Firebase
export async function getFirebaseAppAsync(): Promise<FirebaseApp | null> {
  if (!IS_NETLIFY_BUILD && import.meta.env.VITE_FORCE_FIREBASE !== "true") {
    console.log("üì± Firebase App indispon√≠vel - aguardando deploy no Netlify");
    return null;
  }

  // Tentar inicializar se ainda n√£o foi feito
  if (!firebaseApp) {
    try {
      const config = getFirebaseConfig();
      if (getApps().length === 0) {
        firebaseApp = initializeApp(config);
        console.log("‚úÖ Firebase inicializado assincronamente");
      } else {
        firebaseApp = getApp();
      }
    } catch (error: any) {
      console.error("‚ùå Erro na inicializa√ß√£o ass√≠ncrona:", error.message);
    }
  }

  return firebaseApp;
}

// Fun√ß√£o para verificar se Firebase est√° pronto
export function isFirebaseReady(): boolean {
  if (!IS_NETLIFY_BUILD && !import.meta.env.VITE_FORCE_FIREBASE) return false;
  return firebaseApp !== null;
}

// Fun√ß√£o para obter db seguro - usar firestoreConfig diretamente
export function getDB() {
  console.log("üíæ Use getFirebaseFirestore() diretamente do firestoreConfig");
  return null;
}

// Fun√ß√£o para verificar se Firestore est√° dispon√≠vel (sempre retorna fallback)
export function withFirestore<T>(
  callback: (db: any) => T,
  fallback?: T,
): T | null {
  console.log("üíæ Opera√ß√£o Firestore: usando modo local");
  return fallback ?? null;
}

// Export db como inst√¢ncia (sempre null)
export const db = null;

// Fun√ß√£o para obter auth seguro
export function getAuth() {
  if (!IS_NETLIFY_BUILD && import.meta.env.VITE_FORCE_FIREBASE !== "true") {
    console.log("üîê Auth indispon√≠vel - aguardando deploy no Netlify");
    return null;
  }

  try {
    if (!firebaseApp) {
      console.error("üîê Firebase App n√£o inicializada para Auth");
      return null;
    }
    return getFirebaseAuth(firebaseApp);
  } catch (error: any) {
    console.error("üîê Erro ao obter Auth:", error.message);
    return null;
  }
}

// Export auth como fun√ß√£o (sempre null)
export const auth = null;

// Status Firebase sempre em modo local

// Fun√ß√µes de compatibilidade
export const getDBAsync = async () => {
  if (!IS_NETLIFY_BUILD && !import.meta.env.VITE_FORCE_FIREBASE) return null;
  return await getFirebaseFirestoreAsync();
};

export const getAuthService = async () => {
  if (!IS_NETLIFY_BUILD && !import.meta.env.VITE_FORCE_FIREBASE) return null;
  return getAuth();
};

export const attemptFirestoreInit = async () => {
  if (!IS_NETLIFY_BUILD && !import.meta.env.VITE_FORCE_FIREBASE) return null;
  return await getFirebaseFirestoreAsync();
};

export const waitForFirebaseInit = () =>
  Promise.resolve(FORCE_FIREBASE_PRODUCTION && firebaseApp !== null);
export const isFirebaseAuthAvailable = () =>
  FORCE_FIREBASE_PRODUCTION && firebaseApp !== null;
export const isFirebaseFirestoreAvailable = () =>
  FORCE_FIREBASE_PRODUCTION && firebaseApp !== null;
export const testFirebaseFirestore = async () => {
  console.log("üíæ Use testFirestore() diretamente do firestoreConfig");
  return false;
};

// Exporta√ß√µes principais - removidas para evitar depend√™ncia circular
// Use as fun√ß√µes diretamente do firestoreConfig

// Export app como inst√¢ncia (sempre null)
export const app = null;

export default firebaseApp;
