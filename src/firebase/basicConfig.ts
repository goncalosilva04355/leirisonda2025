// Passo 1: Configura√ß√£o b√°sica do Firebase
import { initializeApp, getApps, FirebaseApp } from "firebase/app";
import { isPrivateBrowsing } from "../utils/storageUtils";
import { FirebaseConfigValidator } from "./configValidator";

// Configura√ß√£o oficial validada
const firebaseConfig = FirebaseConfigValidator.enforceCorrectConfig();

// Vari√°vel para armazenar a inst√¢ncia do Firebase
let firebaseApp: FirebaseApp | null = null;

// Fun√ß√£o simples para inicializar Firebase
function initializeFirebaseBasic(): FirebaseApp | null {
  try {
    // Verificar se estamos em modo privado
    if (isPrivateBrowsing()) {
      console.warn(
        "üîí Modo privado detectado - Firebase pode ter funcionalidades limitadas",
      );
      console.log(
        "üí° Sistema funcionar√° em modo local com funcionalidades reduzidas",
      );
    }

    // Verificar se j√° existe uma app
    const existingApps = getApps();

    if (existingApps.length > 0) {
      firebaseApp = existingApps[0];
      console.log("‚úÖ Firebase: Usando app existente");
    } else {
      firebaseApp = initializeApp(firebaseConfig);
      console.log("‚úÖ Firebase: App inicializada com sucesso");
    }

    return firebaseApp;
  } catch (error) {
    console.warn(
      "‚ö†ÔøΩÔøΩÔøΩ Firebase: Problema na inicializa√ß√£o, mas app pode funcionar em modo local",
    );
    console.log("üí° Sistema continua funcional com autentica√ß√£o local");
    firebaseApp = null;
    return null;
  }
}

// Fun√ß√£o para obter a app Firebase
export function getFirebaseApp(): FirebaseApp | null {
  if (!firebaseApp) {
    return initializeFirebaseBasic();
  }
  return firebaseApp;
}

// Fun√ß√£o para verificar se Firebase est√° pronto
export function isFirebaseReady(): boolean {
  return firebaseApp !== null;
}

// Inicializar automaticamente quando o m√≥dulo √© carregado
initializeFirebaseBasic();

// Exporta√ß√µes para compatibilidade com c√≥digo existente
export const app = firebaseApp;

// Fun√ß√£o para obter db seguro
export function getDB() {
  try {
    const firestoreInstance = getFirebaseFirestore();
    if (firestoreInstance) {
      return firestoreInstance;
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Firestore n√£o dispon√≠vel:", error);
  }
  return null;
}

// Fun√ß√£o para verificar se Firestore est√° dispon√≠vel antes de usar
export function withFirestore<T>(
  callback: (db: any) => T,
  fallback?: T,
): T | null {
  const firestoreDb = getDB();
  if (firestoreDb) {
    try {
      return callback(firestoreDb);
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao executar opera√ß√£o Firestore:", error);
      return fallback ?? null;
    }
  }
  console.warn("‚ö†Ô∏è Firestore n√£o dispon√≠vel - opera√ß√£o ignorada");
  return fallback ?? null;
}

// Export db como inst√¢ncia (pode ser null)
export const db = getDB();

// Fun√ß√£o para obter auth seguro
export function getAuth() {
  try {
    const authInstance = getFirebaseAuth();
    if (authInstance) {
      return authInstance;
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Firebase Auth n√£o dispon√≠vel:", error);
  }
  return null;
}

// Export auth como fun√ß√£o
export const auth = getAuth();

// Importar Auth do Passo 2
import { getFirebaseAuth, isFirebaseAuthReady } from "./authConfig";
// Importar Firestore do Passo 3
import {
  getFirebaseFirestore,
  isFirestoreReady,
  testFirestore,
} from "./firestoreConfig";
// Importar status do simpleConfig
import { getFirebaseStatus } from "./simpleConfig";

// Fun√ß√µes de compatibilidade
export const getDBAsync = () => Promise.resolve(getFirebaseFirestore());
export const getAuthService = () => Promise.resolve(getFirebaseAuth());
export const attemptFirestoreInit = () =>
  Promise.resolve(getFirebaseFirestore());
export const waitForFirebaseInit = () => Promise.resolve(true);
export const isFirebaseAuthAvailable = () => isFirebaseAuthReady();
export const isFirebaseFirestoreAvailable = () => isFirestoreReady();
export const testFirebaseFirestore = testFirestore;
export { getFirebaseFirestore, isFirestoreReady, getFirebaseStatus };

export default firebaseApp;
