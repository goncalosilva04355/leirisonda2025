// Passo 1: Configura√ß√£o b√°sica do Firebase
import { initializeApp, getApps, FirebaseApp } from "firebase/app";
import { isPrivateBrowsing } from "../utils/storageUtils";
import { getFirebaseConfig } from "../config/firebaseEnv";

// Configura√ß√£o do Firebase usando helper centralizado
const firebaseConfig = getFirebaseConfig();

// Vari√°vel para armazenar a inst√¢ncia do Firebase
let firebaseApp: FirebaseApp | null = null;
let isInitializing = false;

// Fun√ß√£o robusta para inicializar Firebase apenas uma vez
function initializeFirebaseBasic(): FirebaseApp | null {
  // Evitar m√∫ltiplas inicializa√ß√µes simult√¢neas
  if (isInitializing) {
    console.log("‚è≥ Firebase: Inicializa√ß√£o j√° em progresso, aguardando...");
    return firebaseApp;
  }

  // Se j√° temos uma app v√°lida, retorn√°-la
  if (firebaseApp) {
    try {
      // Verificar se a app ainda √© v√°lida
      const apps = getApps();
      if (apps.find((app) => app === firebaseApp)) {
        console.log("‚úÖ Firebase: App existente e v√°lida");
        return firebaseApp;
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Firebase: App existente inv√°lida, reinicializando");
      firebaseApp = null;
    }
  }

  try {
    isInitializing = true;

    // Verificar se estamos em modo privado
    if (isPrivateBrowsing()) {
      console.warn("üîí Modo privado detectado - Firebase pode ter limita√ß√µes");
    }

    // Verificar se j√° existe uma app v√°lida
    const existingApps = getApps();

    if (existingApps.length > 0) {
      // Usar a primeira app existente se for v√°lida
      firebaseApp = existingApps[0];
      console.log("‚úÖ Firebase: Reutilizando app existente");
    } else {
      // Criar nova app apenas se n√£o existir nenhuma
      firebaseApp = initializeApp(firebaseConfig);
      console.log("‚úÖ Firebase: Nova app inicializada");
    }

    console.log("üî• Firebase sempre ativo - sincroniza√ß√£o garantida");
    return firebaseApp;
  } catch (error: any) {
    console.error("‚ùå Firebase: Erro na inicializa√ß√£o:", error);
    firebaseApp = null;

    // Se for erro de app j√° existir, tentar usar a existente
    if (error.code === "app/duplicate-app") {
      const apps = getApps();
      if (apps.length > 0) {
        firebaseApp = apps[0];
        console.log("‚úÖ Firebase: App duplicada resolvida, usando existente");
        return firebaseApp;
      }
    }

    return null;
  } finally {
    isInitializing = false;
  }
}

// Fun√ß√£o robusta para obter a app Firebase
export function getFirebaseApp(): FirebaseApp | null {
  // Se n√£o temos app, tentar inicializar
  if (!firebaseApp) {
    return initializeFirebaseBasic();
  }

  // Verificar se a app ainda √© v√°lida
  try {
    const apps = getApps();
    if (apps.find((app) => app === firebaseApp)) {
      return firebaseApp;
    } else {
      // App n√£o est√° mais na lista, limpar refer√™ncia e reinicializar
      console.warn("‚ö†Ô∏è Firebase: App n√£o encontrada na lista, reinicializando");
      firebaseApp = null;
      return initializeFirebaseBasic();
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Firebase: Erro ao verificar apps:", error);
    return firebaseApp; // Retornar a app mesmo com erro de verifica√ß√£o
  }
}

// Fun√ß√£o para verificar se Firebase est√° pronto
export function isFirebaseReady(): boolean {
  return firebaseApp !== null;
}

// Inicializa√ß√£o lazy - apenas quando necess√°rio
// initializeFirebaseBasic(); // Removido para evitar conflitos

// Exporta√ß√µes para compatibilidade com c√≥digo existente
export const app = firebaseApp;

// Fun√ß√£o para obter db seguro
export function getDB() {
  try {
    const firestoreInstance = getFirebaseFirestore();
    if (firestoreInstance) {
      return firestoreInstance;
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Firestore n√£o dispon√≠vel:", error);
  }
  return null;
}

// Fun√ß√£o para verificar se Firestore est√° dispon√≠vel antes de usar
export function withFirestore<T>(
  callback: (db: any) => T,
  fallback?: T,
): T | null {
  const firestoreDb = getDB();
  if (firestoreDb) {
    try {
      return callback(firestoreDb);
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao executar opera√ß√£o Firestore:", error);
      return fallback ?? null;
    }
  }
  console.warn("‚ö†Ô∏è Firestore n√£o dispon√≠vel - opera√ß√£o ignorada");
  return fallback ?? null;
}

// Export db como inst√¢ncia (pode ser null)
export const db = getDB();

// Fun√ß√£o para obter auth seguro
export function getAuth() {
  try {
    const authInstance = getFirebaseAuth();
    if (authInstance) {
      return authInstance;
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è Firebase Auth n√£o dispon√≠vel:", error);
  }
  return null;
}

// Export auth como fun√ß√£o
export const auth = getAuth();

// Importar Auth do Passo 2
import { getFirebaseAuth, isFirebaseAuthReady } from "./authConfig";
// Importar Firestore do Passo 3
import {
  getFirebaseFirestore,
  isFirestoreReady,
  testFirestore,
} from "./firestoreConfig";
// Importar status do simpleConfig
import { getFirebaseStatus } from "./simpleConfig";

// Fun√ß√µes de compatibilidade
export const getDBAsync = () => Promise.resolve(getFirebaseFirestore());
export const getAuthService = () => Promise.resolve(getFirebaseAuth());
export const attemptFirestoreInit = () =>
  Promise.resolve(getFirebaseFirestore());
export const waitForFirebaseInit = () => Promise.resolve(true);
export const isFirebaseAuthAvailable = () => isFirebaseAuthReady();
export const isFirebaseFirestoreAvailable = () => isFirestoreReady();
export const testFirebaseFirestore = testFirestore;
export { getFirebaseFirestore, isFirestoreReady, getFirebaseStatus };

export default firebaseApp;
