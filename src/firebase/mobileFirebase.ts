// CONFIGURA√á√ÉO FIREBASE MOBILE USANDO REST API
// Elimina completamente os erros getImmediate usando REST API diretamente

import {
  saveToFirestoreRest,
  readFromFirestoreRest,
  deleteFromFirestoreRest,
} from "../utils/firestoreRestApi";

// Estado de inicializa√ß√£o
let isInitialized = false;
let initializationPromise: Promise<void> | null = null;

// Detectar se √© um dispositivo m√≥vel
const isMobileDevice = (): boolean => {
  return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
};

// Inicializa√ß√£o simplificada usando REST API
export const initializeFirebaseMobile = async (): Promise<void> => {
  // Se j√° est√° inicializando, aguardar a inicializa√ß√£o atual
  if (initializationPromise) {
    return initializationPromise;
  }

  // Se j√° foi inicializado, retornar imediatamente
  if (isInitialized) {
    return Promise.resolve();
  }

  initializationPromise = new Promise(async (resolve) => {
    try {
      console.log("üî• Iniciando Firebase Mobile com REST API...");

      // Aguardar REST API estar dispon√≠vel
      const waitForRestApi = async (): Promise<boolean> => {
        let attempts = 0;
        const maxAttempts = 10;

        while (attempts < maxAttempts) {
          if ((window as any).firestoreRestApi) {
            console.log("‚úÖ REST API detectada e dispon√≠vel");
            return true;
          }

          console.log(
            `‚è≥ Aguardando REST API (tentativa ${attempts + 1}/${maxAttempts})...`,
          );
          await new Promise((resolve) => setTimeout(resolve, 500));
          attempts++;
        }

        console.warn("‚ö†Ô∏è REST API n√£o detectada, mas continuando...");
        return false;
      };

      // Aguardar REST API
      await waitForRestApi();

      // Teste b√°sico da REST API
      try {
        console.log("üß™ Testando conectividade REST API...");

        // Teste simples - tentar ler uma cole√ß√£o
        const testData = await readFromFirestoreRest("test");
        console.log("‚úÖ REST API funcionando - conectividade confirmada");
      } catch (error) {
        console.warn("‚ö†Ô∏è Teste REST API falhou, mas continuando:", error);
      }

      // Configura√ß√£o espec√≠fica para mobile
      if (isMobileDevice()) {
        console.log("üì± Aplicando configura√ß√µes otimizadas para mobile...");

        // Aguardar mais tempo em dispositivos m√≥veis para estabiliza√ß√£o
        await new Promise((resolve) => setTimeout(resolve, 1000));
      }

      isInitialized = true;
      console.log("üéâ Firebase Mobile (REST API) inicializado com sucesso!");
      resolve();
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro na inicializa√ß√£o, mas continuando:", error);
      isInitialized = true; // Marcar como inicializado mesmo com erro
      resolve(); // N√£o falhar para n√£o bloquear a aplica√ß√£o
    }
  });

  return initializationPromise;
};

// Fun√ß√£o para salvar dados usando REST API
export const saveToFirebaseMobile = async (
  collection: string,
  documentId: string,
  data: any,
): Promise<boolean> => {
  try {
    await initializeFirebaseMobile();
    return await saveToFirestoreRest(collection, documentId, data);
  } catch (error) {
    console.warn(`‚ö†Ô∏è Erro ao salvar ${collection}/${documentId}:`, error);
    return false;
  }
};

// Fun√ß√£o para ler dados usando REST API
export const readFromFirebaseMobile = async (
  collection: string,
): Promise<any[]> => {
  try {
    await initializeFirebaseMobile();
    return await readFromFirestoreRest(collection);
  } catch (error) {
    console.warn(`‚ö†Ô∏è Erro ao ler ${collection}:`, error);
    return [];
  }
};

// Fun√ß√£o para deletar dados usando REST API
export const deleteFromFirebaseMobile = async (
  collection: string,
  documentId: string,
): Promise<boolean> => {
  try {
    await initializeFirebaseMobile();
    return await deleteFromFirestoreRest(collection, documentId);
  } catch (error) {
    console.warn(`‚ö†Ô∏è Erro ao deletar ${collection}/${documentId}:`, error);
    return false;
  }
};

// Verificar se Firebase Mobile est√° pronto
export const isFirebaseMobileReady = (): boolean => {
  return isInitialized && !!(window as any).firestoreRestApi;
};

// Fun√ß√£o para verificar conectividade (usando REST API)
export const checkFirebaseMobileConnectivity = async (): Promise<boolean> => {
  try {
    await initializeFirebaseMobile();

    // Teste simples de conectividade via REST API
    const testData = await readFromFirestoreRest("test");
    console.log("‚úÖ Firebase Mobile conectividade OK via REST API");
    return true;
  } catch (error) {
    console.warn("‚ö†Ô∏è Firebase Mobile sem conectividade:", error);
    return false;
  }
};

// Fun√ß√µes de compatibilidade com o SDK (para n√£o quebrar c√≥digo existente)
export const getFirebaseMobileFirestore = async () => {
  await initializeFirebaseMobile();
  return {
    // Retornar objeto com m√©todos compat√≠veis
    save: saveToFirebaseMobile,
    read: readFromFirebaseMobile,
    delete: deleteFromFirebaseMobile,
    isReady: isFirebaseMobileReady,
  };
};

export const getFirebaseMobileAuth = async () => {
  await initializeFirebaseMobile();
  return {
    // Auth ser√° tratado localmente j√° que a REST API n√£o inclui Auth
    signIn: () =>
      console.log("Auth via localStorage - REST API n√£o inclui Auth"),
    signOut: () =>
      console.log("Auth via localStorage - REST API n√£o inclui Auth"),
    currentUser: null,
  };
};

// Auto-inicializa√ß√£o para aplica√ß√µes m√≥veis
if (isMobileDevice()) {
  console.log("üì± Dispositivo m√≥vel detectado, preparando REST API...");

  const autoInit = async () => {
    // Aguardar o DOM estar completamente carregado
    if (document.readyState !== "complete") {
      await new Promise((resolve) => {
        if (document.readyState === "complete") {
          resolve(void 0);
        } else {
          window.addEventListener("load", () => resolve(void 0), {
            once: true,
          });
        }
      });
    }

    // Aguardar tempo adicional para REST API estar dispon√≠vel
    await new Promise((resolve) => setTimeout(resolve, 1000));

    try {
      console.log(
        "üöÄ Iniciando auto-inicializa√ß√£o Firebase Mobile (REST API)...",
      );
      await initializeFirebaseMobile();
      console.log(
        "‚úÖ Auto-inicializa√ß√£o Firebase Mobile (REST API) completada",
      );
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è Auto-inicializa√ß√£o falhou, app funcionar√° normalmente:",
        error,
      );
    }
  };

  autoInit();
}

// Configuration for mobile Firebase using environment variables
import { getSecureFirebaseConfig } from "../config/firebaseEnvSecure";

// Get configuration from environment variables
let firebaseConfig: any;
try {
  const config = getSecureFirebaseConfig();
  firebaseConfig = {
    apiKey: config.apiKey,
    projectId: config.projectId,
    restApiMode: true,
  };
} catch (error) {
  console.error(
    "‚ùå Firebase mobile configuration requires environment variables",
  );
  throw error;
}

export { firebaseConfig };

export default {
  save: saveToFirebaseMobile,
  read: readFromFirebaseMobile,
  delete: deleteFromFirebaseMobile,
  isReady: isFirebaseMobileReady,
  checkConnectivity: checkFirebaseMobileConnectivity,
};
