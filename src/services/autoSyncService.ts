// Sistema de sincroniza√ß√£o autom√°tica em tempo real
import {
  onSnapshot,
  collection,
  doc,
  DocumentData,
  QuerySnapshot,
  DocumentSnapshot,
  Unsubscribe,
} from "firebase/firestore";
import { getFirebaseFirestore } from "../firebase/firestoreConfig";
import { firestoreService } from "./firestoreService";
import { SystemConfig, isSystemDisabled } from "../config/systemConfig";

export interface SyncObserver {
  collection: string;
  localStorageKey: string;
  callback?: (data: any[]) => void;
  unsubscribe?: Unsubscribe;
}

export class AutoSyncService {
  private observers: Map<string, SyncObserver> = new Map();
  private db = getFirebaseFirestore();
  private isActive = false;

  // Inicializar sincroniza√ß√£o autom√°tica
  async startAutoSync(): Promise<void> {
    if (!this.db || this.isActive) return;

    console.log("üîÑ Iniciando sincroniza√ß√£o autom√°tica em tempo real...");
    this.isActive = true;

    // Configurar observadores para todas as cole√ß√µes
    await this.setupObservers();

    console.log("‚úÖ Sincroniza√ß√£o autom√°tica ativa!");
  }

  // Parar sincroniza√ßÔøΩÔøΩo autom√°tica
  stopAutoSync(): void {
    console.log("‚èπÔ∏è Parando sincroniza√ß√£o autom√°tica...");

    this.observers.forEach((observer) => {
      if (observer.unsubscribe) {
        observer.unsubscribe();
      }
    });

    this.observers.clear();
    this.isActive = false;

    console.log("‚úÖ Sincroniza√ß√£o autom√°tica parada");
  }

  // Configurar observadores para todas as cole√ß√µes
  private async setupObservers(): Promise<void> {
    const collections = [
      { name: "obras", localKey: "works" },
      { name: "piscinas", localKey: "pools" },
      { name: "manutencoes", localKey: "maintenance" },
      { name: "utilizadores", localKey: "app-users" },
      { name: "clientes", localKey: "clients" },
      { name: "localizacoes", localKey: "locations" },
      { name: "notificacoes", localKey: "notifications" },
      { name: "photos", localKey: "photos" },
    ];

    for (const col of collections) {
      await this.createObserver(col.name, col.localKey);
    }
  }

  // Criar observador para uma cole√ß√£o espec√≠fica
  private async createObserver(
    collectionName: string,
    localStorageKey: string,
  ): Promise<void> {
    if (!this.db) return;

    try {
      const collectionRef = collection(this.db, collectionName);

      const unsubscribe = onSnapshot(
        collectionRef,
        (snapshot: QuerySnapshot<DocumentData>) => {
          this.handleCollectionChange(
            collectionName,
            localStorageKey,
            snapshot,
          );
        },
        (error) => {
          console.error(`‚ùå Erro no observador ${collectionName}:`, error);
        },
      );

      const observer: SyncObserver = {
        collection: collectionName,
        localStorageKey,
        unsubscribe,
      };

      this.observers.set(collectionName, observer);
      console.log(`üì± Observador ativo para ${collectionName}`);
    } catch (error) {
      console.error(
        `‚ùå Erro ao criar observador para ${collectionName}:`,
        error,
      );
    }
  }

  // Processar mudan√ßas na cole√ß√£o
  private handleCollectionChange(
    collectionName: string,
    localStorageKey: string,
    snapshot: QuerySnapshot<DocumentData>,
  ): void {
    try {
      const data: any[] = [];

      snapshot.forEach((doc) => {
        data.push({
          id: doc.id,
          ...doc.data(),
        });
      });

      // Atualizar localStorage automaticamente
      localStorage.setItem(localStorageKey, JSON.stringify(data));

      // Disparar evento customizado para atualizar UI
      window.dispatchEvent(
        new CustomEvent(`${collectionName}Updated`, {
          detail: { data, collection: collectionName },
        }),
      );

      console.log(`üîÑ ${collectionName} sincronizado: ${data.length} itens`);
    } catch (error) {
      console.error(
        `‚ùå Erro ao processar mudan√ßa em ${collectionName}:`,
        error,
      );
    }
  }

  // Sincroniza√ß√£o manual de uma cole√ß√£o espec√≠fica
  async syncCollection(
    collectionName: string,
    localStorageKey: string,
  ): Promise<void> {
    try {
      console.log(`üîÑ Sincronizando ${collectionName} manualmente...`);

      const data = await firestoreService.getCollection(collectionName);
      localStorage.setItem(localStorageKey, JSON.stringify(data));

      // Disparar evento de atualiza√ß√£o
      window.dispatchEvent(
        new CustomEvent(`${collectionName}Updated`, {
          detail: { data, collection: collectionName },
        }),
      );

      console.log(
        `‚úÖ ${collectionName} sincronizado manualmente: ${data.length} itens`,
      );
    } catch (error: any) {
      // Check if it's a Firestore unavailability error
      if (
        error.message?.includes("getImmediate") ||
        error.code === "firestore/unavailable" ||
        error.message?.includes("Service firestore is not available")
      ) {
        console.warn(
          `‚ö†Ô∏è Firestore n√£o dispon√≠vel para ${collectionName} - usando dados locais`,
        );

        // Try to get data from localStorage as fallback
        const localData = this.getLocalStorageData(localStorageKey);
        if (localData.length > 0) {
          console.log(
            `üì± ${collectionName} carregado do localStorage: ${localData.length} itens`,
          );

          // Dispatch event with local data
          window.dispatchEvent(
            new CustomEvent(`${collectionName}Updated`, {
              detail: {
                data: localData,
                collection: collectionName,
                source: "localStorage",
              },
            }),
          );
        }
      } else {
        console.error(
          `‚ùå Erro na sincroniza√ß√£o manual de ${collectionName}:`,
          error.message || error,
        );
      }
    }
  }

  // Sincronizar todas as cole√ß√µes manualmente
  async syncAllCollections(): Promise<void> {
    console.log("ÔøΩÔøΩÔøΩ Sincroniza√ß√£o manual completa iniciada...");

    const collections = [
      { name: "obras", localKey: "works" },
      { name: "piscinas", localKey: "pools" },
      { name: "manutencoes", localKey: "maintenance" },
      { name: "utilizadores", localKey: "app-users" },
      { name: "clientes", localKey: "clients" },
      { name: "localizacoes", localKey: "locations" },
      { name: "notificacoes", localKey: "notifications" },
    ];

    await Promise.all(
      collections.map((col) => this.syncCollection(col.name, col.localKey)),
    );

    console.log("‚úÖ Sincroniza√ß√£o manual completa conclu√≠da!");
  }

  // Verificar se a sincroniza√ß√£o est√° ativa
  isAutoSyncActive(): boolean {
    return this.isActive;
  }

  // Verificar e iniciar auto sync ap√≥s login (m√©todo espec√≠fico)
  async ensureAutoSyncAfterLogin(): Promise<boolean> {
    try {
      console.log("üîë Verificando auto sync ap√≥s login...");

      if (!this.db) {
        console.warn("‚ö†Ô∏è Firebase n√£o dispon√≠vel para auto sync");
        return false;
      }

      if (this.isActive) {
        console.log("‚úÖ Auto sync j√° est√° ativo ap√≥s login");
        return true;
      }

      console.log("üöÄ Iniciando auto sync ap√≥s login...");
      await this.startAutoSync();

      if (this.isActive) {
        console.log("‚úÖ Auto sync iniciado com sucesso ap√≥s login!");

        // For√ßar uma sincroniza√ß√£o completa imediata
        await this.syncAllCollections();
        console.log("üîÑ Sincroniza√ß√£o completa executada ap√≥s login");

        return true;
      } else {
        console.warn("‚ö†Ô∏è Falha ao iniciar auto sync ap√≥s login");
        return false;
      }
    } catch (error) {
      console.error("‚ùå Erro ao garantir auto sync ap√≥s login:", error);
      return false;
    }
  }

  // Obter status dos observadores
  getObserversStatus(): { [key: string]: boolean } {
    const status: { [key: string]: boolean } = {};

    this.observers.forEach((observer, key) => {
      status[key] = observer.unsubscribe !== undefined;
    });

    return status;
  }

  // For√ßar sincroniza√ß√£o imediata ap√≥s opera√ß√£o CRUD
  async forceSyncAfterOperation(
    collectionName: string,
    operation: "create" | "update" | "delete",
    data?: any,
  ): Promise<void> {
    console.log(
      `‚ö° Sincroniza√ß√£o for√ßada ap√≥s ${operation} em ${collectionName}`,
    );

    try {
      // Aguardar um pouco para o Firestore processar
      await new Promise((resolve) => setTimeout(resolve, 100));

      // Sincronizar a cole√ß√£o espec√≠fica
      const localStorageKey = this.getLocalStorageKey(collectionName);
      if (localStorageKey) {
        await this.syncCollection(collectionName, localStorageKey);
      }
    } catch (error) {
      console.error(`‚ùå Erro na sincroniza√ß√£o for√ßada:`, error);
    }
  }

  // Mapear nome da cole√ß√£o para chave do localStorage
  private getLocalStorageKey(collectionName: string): string | null {
    const mapping: { [key: string]: string } = {
      obras: "works",
      piscinas: "pools",
      manutencoes: "maintenance",
      utilizadores: "app-users",
      clientes: "clients",
      localizacoes: "locations",
      notificacoes: "notifications",
      photos: "photos",
    };

    return mapping[collectionName] || null;
  }

  // Helper method to get data from localStorage
  private getLocalStorageData(localStorageKey: string): any[] {
    try {
      const data = localStorage.getItem(localStorageKey);
      return data ? JSON.parse(data) : [];
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao ler ${localStorageKey} do localStorage:`, error);
      return [];
    }
  }
}

// Inst√¢ncia singleton
export const autoSyncService = new AutoSyncService();
